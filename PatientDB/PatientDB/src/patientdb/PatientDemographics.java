/*  Team Project
    Patient Record System
    Trace Flynn, Katlyn Goodwin, Sarah Medich
    CNIT350 Spring 2015
    Professor Stefanek
*/
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;

public class PatientDemographics extends javax.swing.JFrame 
{
    static String patientID = "";
    private void enableForm(boolean formEnabled)
    {
        if(formEnabled == false)
        {
            medicalNumTB.setEnabled(true);
            altMedNumTB.setEnabled(true);
            firstNameTB.setEnabled(true);
            lastNameTB.setEnabled(true);
            midIntTB.setEnabled(true);
            addressTB.setEnabled(true);
            stateTB.setEnabled(true);
            cityTB.setEnabled(true);
            zipTB.setEnabled(true);
            genderTB.setEnabled(true);
            bDateTB.setEnabled(true);
            homePhoneTB.setEnabled(true);
            workPhoneTB.setEnabled(true);
            emailTB.setEnabled(true);
            nextKinTB.setEnabled(true);
            nextKinContactTB.setEnabled(true);
            genNotesTB.setEnabled(true);
            addRecButton.setEnabled(true);
            deleteRecButton.setEnabled(true);
            saveRecButton.setEnabled(true);
            cancelRecButton.setEnabled(true);
            modRecButton.setEnabled(false);
            medPageButton.setEnabled(false);
            vitalSignsPageButton.setEnabled(false);
            encountersPageButton.setEnabled(false);
            reportsPageButton.setEnabled(false);
            labsPageButton.setEnabled(false);
            medicalNumTB.requestFocusInWindow();
        }
        else
        {
            medicalNumTB.setEnabled(false);
            altMedNumTB.setEnabled(false);
            firstNameTB.setEnabled(false);
            lastNameTB.setEnabled(false);
            midIntTB.setEnabled(false);
            addressTB.setEnabled(false);
            stateTB.setEnabled(false);
            cityTB.setEnabled(false);
            zipTB.setEnabled(false);
            genderTB.setEnabled(false);
            bDateTB.setEnabled(false);
            homePhoneTB.setEnabled(false);
            workPhoneTB.setEnabled(false);
            emailTB.setEnabled(false);
            nextKinTB.setEnabled(false);
            nextKinContactTB.setEnabled(false);
            genNotesTB.setEnabled(false);
            addRecButton.setEnabled(false);
            deleteRecButton.setEnabled(false);
            saveRecButton.setEnabled(false);
            cancelRecButton.setEnabled(false);
            modRecButton.setEnabled(true);
            medPageButton.setEnabled(true);
            vitalSignsPageButton.setEnabled(true);
            encountersPageButton.setEnabled(true);
            reportsPageButton.setEnabled(true);
            labsPageButton.setEnabled(true);
        }
    }
    public static String getPatientID()
    {
        return patientID;
    }
    public static void setPatientID(String patientID)
    {
        PatientDemographics.patientID = patientID;
    }
    boolean formEnabled = true;
    //Constructor
    public PatientDemographics() 
    {
        initComponents();
        populateComboBox();
        
        enableForm(formEnabled);
        formEnabled = false;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medicalNumTB = new javax.swing.JTextField();
        altMedNumTB = new javax.swing.JTextField();
        lastNameTB = new javax.swing.JTextField();
        firstNameTB = new javax.swing.JTextField();
        midIntTB = new javax.swing.JTextField();
        addressTB = new javax.swing.JTextField();
        cityTB = new javax.swing.JTextField();
        stateTB = new javax.swing.JTextField();
        zipTB = new javax.swing.JTextField();
        bDateTB = new javax.swing.JTextField();
        ageTB = new javax.swing.JTextField();
        homePhoneTB = new javax.swing.JTextField();
        workPhoneTB = new javax.swing.JTextField();
        emailTB = new javax.swing.JTextField();
        nextKinTB = new javax.swing.JTextField();
        nextKinContactTB = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        genNotesTB = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        patientNameLabel = new javax.swing.JLabel();
        sexLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        addRecButton = new javax.swing.JButton();
        modRecButton = new javax.swing.JButton();
        deleteRecButton = new javax.swing.JButton();
        saveRecButton = new javax.swing.JButton();
        cancelRecButton = new javax.swing.JButton();
        medPageButton = new javax.swing.JButton();
        vitalSignsPageButton = new javax.swing.JButton();
        encountersPageButton = new javax.swing.JButton();
        reportsPageButton = new javax.swing.JButton();
        searchRecButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        patientIDBox = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        genderTB = new javax.swing.JTextField();
        patientIDTB = new javax.swing.JTextField();
        labsPageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        medicalNumTB.setBackground(new java.awt.Color(240, 240, 240));
        medicalNumTB.setEnabled(false);
        medicalNumTB.setName("medicalNumTB"); // NOI18N
        medicalNumTB.setNextFocusableComponent(altMedNumTB);

        altMedNumTB.setEnabled(false);
        altMedNumTB.setName("altMedNumTB"); // NOI18N
        altMedNumTB.setNextFocusableComponent(lastNameTB);
        altMedNumTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altMedNumTBActionPerformed(evt);
            }
        });

        lastNameTB.setEnabled(false);
        lastNameTB.setName("lastNameTB"); // NOI18N
        lastNameTB.setNextFocusableComponent(firstNameTB);

        firstNameTB.setEnabled(false);
        firstNameTB.setName("firstNameTB"); // NOI18N
        firstNameTB.setNextFocusableComponent(midIntTB);

        midIntTB.setEnabled(false);
        midIntTB.setName("midIntTB"); // NOI18N
        midIntTB.setNextFocusableComponent(addressTB);

        addressTB.setEnabled(false);
        addressTB.setName("addressTB"); // NOI18N
        addressTB.setNextFocusableComponent(cityTB);

        cityTB.setEnabled(false);
        cityTB.setName("cityTB"); // NOI18N
        cityTB.setNextFocusableComponent(stateTB);
        cityTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityTBActionPerformed(evt);
            }
        });

        stateTB.setEnabled(false);
        stateTB.setName("stateTB"); // NOI18N
        stateTB.setNextFocusableComponent(zipTB);

        zipTB.setEnabled(false);
        zipTB.setName("zipTB"); // NOI18N
        zipTB.setNextFocusableComponent(genderTB);

        bDateTB.setEnabled(false);
        bDateTB.setName("bDateTB"); // NOI18N
        bDateTB.setNextFocusableComponent(homePhoneTB);

        ageTB.setEnabled(false);
        ageTB.setName("ageTB"); // NOI18N

        homePhoneTB.setEnabled(false);
        homePhoneTB.setName("homePhoneTB"); // NOI18N
        homePhoneTB.setNextFocusableComponent(workPhoneTB);

        workPhoneTB.setEnabled(false);
        workPhoneTB.setName("workPhoneTB"); // NOI18N
        workPhoneTB.setNextFocusableComponent(emailTB);

        emailTB.setEnabled(false);
        emailTB.setName("emailTB"); // NOI18N
        emailTB.setNextFocusableComponent(nextKinTB);

        nextKinTB.setEnabled(false);
        nextKinTB.setName("nextKinTB"); // NOI18N
        nextKinTB.setNextFocusableComponent(nextKinContactTB);

        nextKinContactTB.setEnabled(false);
        nextKinContactTB.setName("nextKinContactTB"); // NOI18N
        nextKinContactTB.setNextFocusableComponent(genNotesTB);

        jLabel1.setText("Patient ID :");

        jLabel2.setText("Medical Record Number :");

        jLabel3.setText("Alternate Medical Record Number :");

        jLabel4.setText("Last Name :");

        jLabel5.setText("First Name :");

        jLabel6.setText("Middle Initial :");

        jLabel7.setText("Address :");

        jLabel8.setText("City :");

        jLabel9.setText("State :");

        jLabel10.setText("ZIP Code :");

        jLabel11.setText("Birth Date :");

        jLabel12.setText("Age :");

        jLabel13.setText("Home Phone :");

        jLabel14.setText("Work Phone :");

        jLabel15.setText("Email :");

        jLabel16.setText("Next of Kin :");

        jLabel17.setText("Next of Kin Contact Info :");

        jLabel18.setText("General Notes :");

        genNotesTB.setColumns(20);
        genNotesTB.setRows(5);
        genNotesTB.setEnabled(false);
        genNotesTB.setName("genNotesTB"); // NOI18N
        genNotesTB.setNextFocusableComponent(medicalNumTB);
        jScrollPane1.setViewportView(genNotesTB);

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel19.setText("Patient Demographics");

        patientNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        patientNameLabel.setForeground(new java.awt.Color(255, 0, 204));
        patientNameLabel.setText("name");
        patientNameLabel.setName("patientNameLabel"); // NOI18N

        sexLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        sexLabel.setForeground(new java.awt.Color(255, 0, 204));
        sexLabel.setText("gender");
        sexLabel.setName("sexLabel"); // NOI18N

        ageLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ageLabel.setForeground(new java.awt.Color(255, 0, 204));
        ageLabel.setText("jLabel22");
        ageLabel.setName("ageLabel"); // NOI18N

        addRecButton.setText("Add Record");
        addRecButton.setEnabled(false);
        addRecButton.setName("addRecButton"); // NOI18N
        addRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addRecButtonMouseClicked(evt);
            }
        });
        addRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRecButtonActionPerformed(evt);
            }
        });

        modRecButton.setText("Modify");
        modRecButton.setName("modRecButton"); // NOI18N
        modRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modRecButtonMouseClicked(evt);
            }
        });

        deleteRecButton.setText("Delete");
        deleteRecButton.setEnabled(false);
        deleteRecButton.setName("deleteRecButton"); // NOI18N
        deleteRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteRecButtonMouseClicked(evt);
            }
        });
        deleteRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecButtonActionPerformed(evt);
            }
        });

        saveRecButton.setText("Save");
        saveRecButton.setEnabled(false);
        saveRecButton.setName("saveRecButton"); // NOI18N
        saveRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveRecButtonMouseClicked(evt);
            }
        });

        cancelRecButton.setText("Cancel");
        cancelRecButton.setEnabled(false);
        cancelRecButton.setName("cancelRecButton"); // NOI18N
        cancelRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelRecButtonMouseClicked(evt);
            }
        });
        cancelRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRecButtonActionPerformed(evt);
            }
        });

        medPageButton.setText("Go To Medications");
        medPageButton.setName("medPageButton"); // NOI18N
        medPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medPageButtonMouseClicked(evt);
            }
        });
        medPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medPageButtonActionPerformed(evt);
            }
        });

        vitalSignsPageButton.setText("Go To Vital Signs");
        vitalSignsPageButton.setName("vitalSignsPageButton"); // NOI18N
        vitalSignsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalSignsPageButtonMouseClicked(evt);
            }
        });

        encountersPageButton.setText("Go To Encounters");
        encountersPageButton.setName("encountersPageButton"); // NOI18N
        encountersPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersPageButtonMouseClicked(evt);
            }
        });

        reportsPageButton.setText("Go To Reports");
        reportsPageButton.setName("reportsPageButton"); // NOI18N
        reportsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsPageButtonMouseClicked(evt);
            }
        });

        searchRecButton.setText("Search");
        searchRecButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchRecButtonMouseClicked(evt);
            }
        });
        searchRecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRecButtonActionPerformed(evt);
            }
        });

        patientIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                patientIDBoxItemStateChanged(evt);
            }
        });

        jLabel20.setText("Gender:");

        genderTB.setEnabled(false);
        genderTB.setNextFocusableComponent(bDateTB);

        labsPageButton.setText("Go To Labs");
        labsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labsPageButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ageLabel)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(errorLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(vitalSignsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(reportsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(medPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(34, 34, 34))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sexLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(112, 112, 112)
                                        .addComponent(patientNameLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(patientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(medicalNumTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(altMedNumTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lastNameTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(firstNameTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jLabel10)
                                                    .addComponent(jLabel20)
                                                    .addComponent(jLabel11))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(midIntTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(addressTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cityTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(stateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(zipTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(genderTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(bDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(homePhoneTB, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(workPhoneTB)
                                                        .addComponent(emailTB)
                                                        .addComponent(nextKinTB, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(nextKinContactTB, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(ageTB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(8, 8, 8)))
                                .addComponent(patientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(searchRecButton, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                .addComponent(addRecButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteRecButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveRecButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelRecButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(modRecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(medPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vitalSignsPageButton)
                        .addGap(3, 3, 3)
                        .addComponent(encountersPageButton)
                        .addGap(1, 1, 1)
                        .addComponent(reportsPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labsPageButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sexLabel)
                            .addComponent(ageLabel)
                            .addComponent(patientNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(patientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchRecButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medicalNumTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(modRecButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(altMedNumTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(3, 3, 3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lastNameTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(firstNameTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(addRecButton)
                                        .addGap(3, 3, 3)
                                        .addComponent(deleteRecButton)
                                        .addGap(1, 1, 1)
                                        .addComponent(saveRecButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(midIntTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelRecButton)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(addressTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(stateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zipTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(genderTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homePhoneTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workPhoneTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextKinTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextKinContactTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void medPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medPageButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medPageButtonActionPerformed

    private void cancelRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRecButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelRecButtonActionPerformed

    private void searchRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchRecButtonMouseClicked
        //not completely functional
        errorLabel.setText("");
        String patientID = patientIDTB.getText();
               
        try 
        {
            String query = "SELECT * FROM patients WHERE PATIENTID ='" 
                    + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            
            if(rs.next())
            {
                patientIDBox.setSelectedItem(patientID);
                setPatientID(patientID);
                con.close();
            }
            else
            {
                errorLabel.setText("Patient does not exist."); 
                con.close();   
            }                                
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            e.printStackTrace();
        }   
    }//GEN-LAST:event_searchRecButtonMouseClicked

    private void cityTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityTBActionPerformed

    private void addRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecButtonActionPerformed
        
    }//GEN-LAST:event_addRecButtonActionPerformed

    private void searchRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRecButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchRecButtonActionPerformed

    private void addRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addRecButtonMouseClicked
        errorLabel.setText("");
        
        String medicalRecordNum = "";
        String altMedicalRecordNum = "";
        String lastName = "";
        String firstName = "";
        String middleInit = "";
        String streetAddress = "";
        String city = "";
        String state = "";
        String zip = "";
        String gender = "";
        String bday = "";
        String age = "";
        String homePhone = "";
        String workPhone = "";
        String email = "";
        String nextOfKin = "";
        String nextOfKinInfo = "";
        String notes = "";
        if((isNumeric(medicalNumTB.getText())) 
                && (medicalNumTB.getText().length() == 10)
                && (isNumeric(altMedNumTB.getText()))
                && (altMedNumTB.getText().length() == 10)
                && (lastNameTB.getText().matches("[a-zA-Z]+")) 
                && (lastNameTB.getText().length() > 1) 
                && (lastNameTB.getText().length() <= 20) 
                && (firstNameTB.getText().matches("[a-zA-Z]+")) 
                && (firstNameTB.getText().length() > 1)
                && (firstNameTB.getText().length() <= 15)
                && (midIntTB.getText().matches("[a-zA-Z]"))
                && (midIntTB.getText().length() == 1)
                && (addressTB.getText().length() > 1)
                && (addressTB.getText().length() <= 30)
                && (cityTB.getText().matches("[a-zA-Z]+"))
                && (cityTB.getText().length() > 1)
                && (cityTB.getText().length() <= 25)
                && (stateTB.getText().matches("[a-zA-Z]+"))
                && (stateTB.getText().length() == 2)
                && (isNumeric(zipTB.getText()))
                && (zipTB.getText().length() == 5)
                && (genderTB.getText().equals("Male") 
                || genderTB.getText().equals("Female"))
                && (bDateTB.getText().length() == 10)
                && (homePhoneTB.getText() != "")
                && (workPhoneTB.getText() != "")
                && (emailTB.getText().matches("^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\"
                        + ".[\\w-]+)*(\\.[a-zA-Z]{2,3})$"))
                && (nextKinTB.getText() != "")
                && (nextKinContactTB.getText() != "")
                && (genNotesTB.getText() != ""))
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                String query = "SELECT * FROM patients WHERE FIRSTNAME ='" 
                        + firstNameTB.getText() + "' AND LASTNAME ='" 
                        + lastNameTB.getText() + "' AND BIRTH_DATE ='" 
                        + bDateTB.getText() + "'";
                ResultSet rs = stmt.executeQuery(query);
                if(rs.next())
                {
                    query = "SELECT * FROM patients WHERE FIRSTNAME ='" 
                        + firstNameTB.getText() + "' AND LASTNAME ='" 
                        + lastNameTB.getText() + "' AND MEDRECORDNUM ='" 
                        + medicalNumTB.getText() + "'";
                    rs = stmt.executeQuery(query);
                    if(rs.next())
                    {
                        con.close();
                        errorLabel.setText("Patient Already Exists");
                    }
                    else
                    {
                        medicalRecordNum = medicalNumTB.getText();
                        altMedicalRecordNum = altMedNumTB.getText();
                        lastName = lastNameTB.getText();
                        firstName = firstNameTB.getText();
                        middleInit = midIntTB.getText();
                        streetAddress = addressTB.getText();
                        city = cityTB.getText();
                        state = stateTB.getText();
                        zip = zipTB.getText();
                        gender = genderTB.getText();
                        bday = bDateTB.getText();
                        homePhone = homePhoneTB.getText();
                        workPhone = workPhoneTB.getText();
                        email = emailTB.getText();
                        nextOfKin = nextKinTB.getText();
                        nextOfKinInfo = nextKinContactTB.getText();
                        notes = genNotesTB.getText();
                        //insert query
                        if(addPatient(medicalRecordNum,altMedicalRecordNum, 
                            lastName, firstName, middleInit, 
                            streetAddress, city, state, zip, gender, 
                            bday, homePhone, workPhone, email, 
                            nextOfKin, nextOfKinInfo, notes))
                        {
                            con.close();
                            patientIDBox.removeAllItems();
                            populateComboBox();
                            errorLabel.setText("Patient Created.");
                        }
                        else
                        {
                            con.close();
                            errorLabel.setText("Unable to add patient "
                                    + "to database.");
                        }  
                    }  
                }
                else
                {
                    
                    medicalRecordNum = medicalNumTB.getText();
                    altMedicalRecordNum = altMedNumTB.getText();
                    lastName = lastNameTB.getText();
                    firstName = firstNameTB.getText();
                    middleInit = midIntTB.getText();
                    streetAddress = addressTB.getText();
                    city = cityTB.getText();
                    state = stateTB.getText();
                    zip = zipTB.getText();
                    gender = genderTB.getText();
                    bday = bDateTB.getText();
                    homePhone = homePhoneTB.getText();
                    workPhone = workPhoneTB.getText();
                    email = emailTB.getText();
                    nextOfKin = nextKinTB.getText();
                    nextOfKinInfo = nextKinContactTB.getText();
                    notes = genNotesTB.getText();
                    if(addPatient(medicalRecordNum,altMedicalRecordNum, 
                        lastName, firstName, middleInit, 
                        streetAddress, city, state, zip, gender,
                        bday, homePhone, workPhone, email, 
                        nextOfKin, nextOfKinInfo, notes))
                    {
                        stmt.close();
                        con.close();
                        patientIDBox.removeAllItems();
                        populateComboBox();
                        errorLabel.setText("Patient Created.");
                    }
                    else
                    {
                        con.close();
                        errorLabel.setText("Unable to add patient "
                            + "to database.");
                    }
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                e.printStackTrace();
                
            }
        }
        else
        {
            errorLabel.setText("Please correctly enter the fields provided. ");
        }
    }//GEN-LAST:event_addRecButtonMouseClicked

    private void deleteRecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecButtonActionPerformed
        
    }//GEN-LAST:event_deleteRecButtonActionPerformed

    private void patientIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_patientIDBoxItemStateChanged
        this.patientID = patientIDBox.getSelectedItem().toString();
        PatientDemographics.setPatientID(patientID);
        setDemographic();
    }//GEN-LAST:event_patientIDBoxItemStateChanged

    private void deleteRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteRecButtonMouseClicked
        errorLabel.setText("");
        boolean deleted = false;
        Connection con = null;
        Statement stmt = null;
        try 
        {
            String query = "DELETE FROM patients WHERE PATIENTID ='" 
                    + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(dbUrl, "root", "root");
            stmt = con.createStatement();
            stmt.execute(query);
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //not found or couldnt connect
            e.printStackTrace();
            errorLabel.setText("Problem deleting record from database.");
        }  
        finally
        {
            try
            {
                stmt.close();
                con.close();
                patientIDBox.removeAllItems();
                populateComboBox();
                errorLabel.setText("Patient Record Successfully Deleted.");
            }
            catch (Exception e) 
            {
                //Problem closing statement or connection
                e.printStackTrace();
            }
        }        
    }//GEN-LAST:event_deleteRecButtonMouseClicked

    private void modRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modRecButtonMouseClicked
        errorLabel.setText("");    
        formEnabled = false;
        enableForm(formEnabled);
        formEnabled = true;
        
    }//GEN-LAST:event_modRecButtonMouseClicked

    private void altMedNumTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altMedNumTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altMedNumTBActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void cancelRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelRecButtonMouseClicked
        errorLabel.setText("");
        formEnabled = true;
        enableForm(formEnabled);
        formEnabled = false;
    }//GEN-LAST:event_cancelRecButtonMouseClicked

    private void saveRecButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveRecButtonMouseClicked
        errorLabel.setText("");
        
        String medicalRecordNum = "";
        String altMedicalRecordNum = "";
        String lastName = "";
        String firstName = "";
        String middleInit = "";
        String streetAddress = "";
        String city = "";
        String state = "";
        String zip = "";
        String gender = "";
        String bday = "";
        String age = "";
        String homePhone = "";
        String workPhone = "";
        String email = "";
        String nextOfKin = "";
        String nextOfKinInfo = "";
        String notes = "";
        if((isNumeric(medicalNumTB.getText())) 
                && (medicalNumTB.getText().length() == 10)
                && (isNumeric(altMedNumTB.getText()))
                && (altMedNumTB.getText().length() == 10)
                && (lastNameTB.getText().matches("[a-zA-Z]+")) 
                && (lastNameTB.getText().length() > 1) 
                && (lastNameTB.getText().length() <= 20) 
                && (firstNameTB.getText().matches("[a-zA-Z]+")) 
                && (firstNameTB.getText().length() > 1)
                && (firstNameTB.getText().length() <= 15)
                && (midIntTB.getText().matches("[a-zA-Z]"))
                && (midIntTB.getText().length() == 1)
                && (addressTB.getText().length() > 1)
                && (addressTB.getText().length() <= 30)
                && (cityTB.getText().matches("[a-zA-Z]+"))
                && (cityTB.getText().length() > 1)
                && (cityTB.getText().length() <= 25)
                && (stateTB.getText().matches("[a-zA-Z]+"))
                && (stateTB.getText().length() == 2)
                && (isNumeric(zipTB.getText()))
                && (zipTB.getText().length() == 5)
                && (genderTB.getText().equals("Male") 
                || genderTB.getText().equals("Female"))
                && (bDateTB.getText().length() == 10)
                && (homePhoneTB.getText() != "")
                && (workPhoneTB.getText() != "")
                && (emailTB.getText().matches("^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\"
                        + ".[\\w-]+)*(\\.[a-zA-Z]{2,3})$"))
                && (nextKinTB.getText() != "")
                && (nextKinContactTB.getText() != "")
                && (genNotesTB.getText() != ""))
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                
                medicalRecordNum = medicalNumTB.getText();
                altMedicalRecordNum = altMedNumTB.getText();
                lastName = lastNameTB.getText();
                firstName = firstNameTB.getText();
                middleInit = midIntTB.getText();
                streetAddress = addressTB.getText();
                city = cityTB.getText();
                state = stateTB.getText();
                zip = zipTB.getText();
                gender = genderTB.getText();
                bday = bDateTB.getText();
                homePhone = homePhoneTB.getText();
                workPhone = workPhoneTB.getText();
                email = emailTB.getText();
                nextOfKin = nextKinTB.getText();
                nextOfKinInfo = nextKinContactTB.getText();
                notes = genNotesTB.getText();
                //insert query
                if(updatePatient(patientID, medicalRecordNum,altMedicalRecordNum, 
                lastName, firstName, middleInit, streetAddress, city, state, 
                zip, gender, bday, homePhone, workPhone, email, nextOfKin, 
                nextOfKinInfo, notes))
                {
                    con.close();
                    errorLabel.setText("Patient Updated.");
                }
                else
                {
                    con.close();
                    errorLabel.setText("Unable to update patient.");                    
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                errorLabel.setText("Problem connecting to database.");
                e.printStackTrace();
            }
        }   
    }//GEN-LAST:event_saveRecButtonMouseClicked

    private void vitalSignsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalSignsPageButtonMouseClicked
        this.setVisible(false);
        new VitalSigns().setVisible(true);
    }//GEN-LAST:event_vitalSignsPageButtonMouseClicked

    private void medPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medPageButtonMouseClicked
        this.setVisible(false);
        new Medications().setVisible(true);
    }//GEN-LAST:event_medPageButtonMouseClicked

    private void encountersPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersPageButtonMouseClicked
        this.setVisible(false);
        new Encounters().setVisible(true);
    }//GEN-LAST:event_encountersPageButtonMouseClicked

    private void reportsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsPageButtonMouseClicked
        this.setVisible(false);
        new Reports().setVisible(true);
    }//GEN-LAST:event_reportsPageButtonMouseClicked

    private void labsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labsPageButtonMouseClicked
        this.setVisible(false);
        new LabsProcedures().setVisible(true);
    }//GEN-LAST:event_labsPageButtonMouseClicked
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientDemographics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientDemographics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientDemographics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientDemographics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientDemographics().setVisible(true);
            }
        });
    }
    
    public static boolean isNumeric(String str)  
    {  
        try  
        {  
            Long.parseLong(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }
    
    public boolean addPatient(String medicalRecordNum, String altMedicalRecordNum, 
            String lastName, String firstName, String middleInit, 
            String streetAddress, String city, String state, String zip, 
            String gender, String bday, String homePhone, String workPhone, 
            String email, String nextOfKin, String nextOfKinInfo, String notes)
    {
        boolean result = false;
        try
        {
            long medRecordNum = Long.parseLong(medicalRecordNum);
            long altRecordNum = Long.parseLong(altMedicalRecordNum);
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("INSERT INTO patients"
                    + " (MEDRECORDNUM, ALTRECORDNUM, LASTNAME, FIRSTNAME, "
                    + "MIDDLEINIT, ADDRESS, CITY, STATE, ZIP_CODE, GENDER, "
                    + "BIRTH_DATE, HOMEPHONE, WORKPHONE, EMAIL, NEXTOFKIN, "
                    + "NEXTOFKINCONTACTINFO, GENERALNOTES) VALUES "
                    + "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            stmt.setLong(1, medRecordNum);
            stmt.setLong(2, altRecordNum);
            stmt.setString(3, lastName);
            stmt.setString(4, firstName);
            stmt.setString(5, middleInit);
            stmt.setString(6, streetAddress);
            stmt.setString(7, city);
            stmt.setString(8, state);
            stmt.setString(9, zip);
            stmt.setString(10, gender);
            stmt.setString(11, bday);
            stmt.setString(12, homePhone);
            stmt.setString(13, workPhone);
            stmt.setString(14, email);
            stmt.setString(15, nextOfKin);
            stmt.setString(16, nextOfKinInfo);
            stmt.setString(17, notes);
            int rowcount = stmt.executeUpdate();
            result = rowcount == 1;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            errorLabel.setText("");
            result = false;
        }
        return result;
    }
    
    public boolean updatePatient(String patientID, String medicalRecordNum, String altMedicalRecordNum, 
            String lastName, String firstName, String middleInit, 
            String streetAddress, String city, String state, String zip, 
            String gender, String bday, String homePhone, String workPhone, 
            String email, String nextOfKin, String nextOfKinInfo, String notes)
    {
        boolean result = false;
        try
        {
            long medRecordNum = Long.parseLong(medicalRecordNum);
            long altRecordNum = Long.parseLong(altMedicalRecordNum);
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("UPDATE patients"
                    + " SET MEDRECORDNUM = ?, ALTRECORDNUM = ?, LASTNAME = ?, FIRSTNAME = ?, "
                    + "MIDDLEINIT = ?, ADDRESS = ?, CITY = ?, STATE = ?, ZIP_CODE = ?, GENDER = ?, "
                    + "BIRTH_DATE = ?, HOMEPHONE = ?, WORKPHONE = ?, EMAIL = ?, NEXTOFKIN = ?, "
                    + "NEXTOFKINCONTACTINFO = ?, GENERALNOTES = ? WHERE PATIENTID ='" + patientID + "'");
            stmt.setLong(1, medRecordNum);
            stmt.setLong(2, altRecordNum);
            stmt.setString(3, lastName);
            stmt.setString(4, firstName);
            stmt.setString(5, middleInit);
            stmt.setString(6, streetAddress);
            stmt.setString(7, city);
            stmt.setString(8, state);
            stmt.setString(9, zip);
            stmt.setString(10, gender);
            stmt.setString(11, bday);
            stmt.setString(12, homePhone);
            stmt.setString(13, workPhone);
            stmt.setString(14, email);
            stmt.setString(15, nextOfKin);
            stmt.setString(16, nextOfKinInfo);
            stmt.setString(17, notes);
            int rowcount = stmt.executeUpdate();
            result = rowcount > 0;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            errorLabel.setText("");
            result = false;
        }
        return result;
    }
    
    public void populateComboBox()
    {
        ArrayList<String> patients = new ArrayList<String>();
        try
        {
            String query = "SELECT PATIENTID FROM patients";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            while(rs.next())
            {
                String id = rs.getString("PATIENTID");
                patients.add(id);
            }
            DefaultComboBoxModel list = new DefaultComboBoxModel(patients.toArray());
            patientIDBox.setModel(list);
            if(patientID.isEmpty())
            {
                patientIDBox.setSelectedIndex(0);
                this.patientID = patientIDBox.getSelectedItem().toString();
            }
            else
            {
                patientIDBox.setSelectedItem(patientID);
            }
            setDemographic();
            con.close();
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connnecting or querying
            errorLabel.setText("Error populating patient ID selection box.");
            e.printStackTrace();
        }
    }
    
    public void setDemographic()
    {
        errorLabel.setText("");
        String medicalRecordNum = "";
        String altMedicalRecordNum = "";
        String lastName = "";
        String firstName = "";
        String middleInit = "";
        String streetAddress = "";
        String city = "";
        String state = "";
        String zip = "";
        String gender = "";
        String bday = "";
        int age = 0;
        String ageString = "";
        String homePhone = "";
        String workPhone = "";
        String email = "";
        String nextOfKin = "";
        String nextOfKinInfo = "";
        String notes = "";
        try 
        {
            String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            
            if(rs.next())
            {
                //get columns
                long medicalRecordNumData = rs.getLong(2);
                medicalRecordNum = Long.toString(medicalRecordNumData);
                long altMedicalRecordNumData = rs.getLong(3);
                altMedicalRecordNum = Long.toString(altMedicalRecordNumData);
                lastName = rs.getString(4);
                firstName = rs.getString(5);
                middleInit = rs.getString(6);
                streetAddress = rs.getString(7);
                city = rs.getString(8);
                state = rs.getString(9);
                int zipData = rs.getInt(10);
                zip = Integer.toString(zipData);
                gender = rs.getString(11);
                bday = rs.getString(12);
                homePhone = rs.getString(13);
                workPhone = rs.getString(14);
                email = rs.getString(15);
                nextOfKin = rs.getString(16);
                nextOfKinInfo = rs.getString(17);
                notes = rs.getString(18);  
                //set text 
                medicalNumTB.setText(medicalRecordNum);
                altMedNumTB.setText(altMedicalRecordNum);
                lastNameTB.setText(lastName);
                firstNameTB.setText(firstName);
                midIntTB.setText(middleInit);
                addressTB.setText(streetAddress);
                stateTB.setText(state);
                cityTB.setText(city);
                zipTB.setText(zip);
                genderTB.setText(gender);
                bDateTB.setText(bday);
                homePhoneTB.setText(homePhone);
                workPhoneTB.setText(workPhone);
                emailTB.setText(email);
                nextKinTB.setText(nextOfKin);
                nextKinContactTB.setText(nextOfKinInfo);
                genNotesTB.setText(notes);
                patientNameLabel.setText(firstName + " " + lastName);
                sexLabel.setText(gender);
                try
                {
                    age = calcAge();
                }
                catch(Exception e)
                {
                    errorLabel.setText("Age not found");
                }
                ageString = Integer.toString(age);
                ageLabel.setText(ageString);
                ageTB.setText(ageString);
                setPatientID(patientIDBox.getSelectedItem().toString());
                con.close();
            }
            else
            {
                //not unique
                con.close();
                errorLabel.setText("Multiple records returned. Please find "
                    + "patient by his/her Patient ID Number.");    
            }                                
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connecting or querying
            e.printStackTrace();
        }   
    }
    public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
    Calendar now = Calendar.getInstance();
    Calendar dob = Calendar.getInstance();
    //dob.setTime(...);
    //if (dob.after(now)) {
    //throw new IllegalArgumentException("Can't be born in the future");
    //}
    try 
    {
        String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
        String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection(dbUrl, "root", "root");
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        if(rs.next())
        {
            bday = rs.getString("BIRTH_DATE");
            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
            dob.setTime(sdf.parse(bday));

            int year1 = now.get(Calendar.YEAR);
            int year2 = dob.get(Calendar.YEAR);
            age = year1 - year2;
            int month1 = now.get(Calendar.MONTH);
            int month2 = dob.get(Calendar.MONTH);
            if (month2 > month1) 
            {
                age--;
            } 
            else if (month1 == month2) 
            {
                int day1 = now.get(Calendar.DAY_OF_MONTH);
                int day2 = dob.get(Calendar.DAY_OF_MONTH);
                if (day2 > day1) 
                {
                    age--;
                }
            }
            return age;
        }
    }
    catch(ClassNotFoundException | SQLException e)
    {
        errorLabel.setText("Age not found.");
    }
    return age; 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRecButton;
    private javax.swing.JTextField addressTB;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField ageTB;
    private javax.swing.JTextField altMedNumTB;
    private javax.swing.JTextField bDateTB;
    private javax.swing.JButton cancelRecButton;
    private javax.swing.JTextField cityTB;
    private javax.swing.JButton deleteRecButton;
    private javax.swing.JTextField emailTB;
    private javax.swing.JButton encountersPageButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField firstNameTB;
    private javax.swing.JTextArea genNotesTB;
    private javax.swing.JTextField genderTB;
    private javax.swing.JTextField homePhoneTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton labsPageButton;
    private javax.swing.JTextField lastNameTB;
    private javax.swing.JButton medPageButton;
    private javax.swing.JTextField medicalNumTB;
    private javax.swing.JTextField midIntTB;
    private javax.swing.JButton modRecButton;
    private javax.swing.JTextField nextKinContactTB;
    private javax.swing.JTextField nextKinTB;
    protected static javax.swing.JComboBox patientIDBox;
    private javax.swing.JTextField patientIDTB;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JButton reportsPageButton;
    private javax.swing.JButton saveRecButton;
    private javax.swing.JButton searchRecButton;
    private javax.swing.JLabel sexLabel;
    private javax.swing.JTextField stateTB;
    private javax.swing.JButton vitalSignsPageButton;
    private javax.swing.JTextField workPhoneTB;
    private javax.swing.JTextField zipTB;
    // End of variables declaration//GEN-END:variables
}