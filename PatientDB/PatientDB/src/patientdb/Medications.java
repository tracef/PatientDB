/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import java.util.Calendar;
import java.util.Locale;

public class Medications extends javax.swing.JFrame {
    String patientID = "";
    boolean formEnabled = true;
    public Medications() 
    {
        initComponents();
        populateUnitsBox();
        populateComboBox();
        if(!PatientDemographics.getPatientID().isEmpty())
        {
            this.patientID = PatientDemographics.getPatientID();
            medicationsPatientIDBox.setSelectedItem(patientID);
        }
        else
        {
            this.patientID = medicationsPatientIDBox.getSelectedItem().toString();
        }
        populateAllList();
        setMedication();
        enableForm(formEnabled);
        formEnabled = false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        medGenderLabel = new javax.swing.JLabel();
        medNameLabel = new javax.swing.JLabel();
        medAgeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        medIDTB = new javax.swing.JTextField();
        medicationsPatientIDTB = new javax.swing.JTextField();
        medNameTB = new javax.swing.JTextField();
        dosageFrequencyTB = new javax.swing.JTextField();
        medStartDateTB = new javax.swing.JTextField();
        medEndDateTB = new javax.swing.JTextField();
        instructionsTB = new javax.swing.JTextField();
        prescribedByTB = new javax.swing.JTextField();
        addMedButton = new javax.swing.JButton();
        modifyMedButton = new javax.swing.JButton();
        deleteMedButton = new javax.swing.JButton();
        saveMedButton = new javax.swing.JButton();
        cancelMedButton = new javax.swing.JButton();
        medsEncountersPageButton = new javax.swing.JButton();
        medsPatientDemPageButton = new javax.swing.JButton();
        medsVSignsPageButton = new javax.swing.JButton();
        medsReportsPageButton = new javax.swing.JButton();
        medLabsPageButton = new javax.swing.JButton();
        medicationsPatientIDBox = new javax.swing.JComboBox();
        dosageTB = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        medListBox = new javax.swing.JList();
        medErrorLabel = new javax.swing.JLabel();
        dosageUnitsBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Medications");

        medGenderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        medGenderLabel.setForeground(new java.awt.Color(255, 0, 204));
        medGenderLabel.setText("jLabel2");

        medNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        medNameLabel.setForeground(new java.awt.Color(255, 0, 204));
        medNameLabel.setText("jLabel2");

        medAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        medAgeLabel.setForeground(new java.awt.Color(255, 0, 204));
        medAgeLabel.setText("jLabel3");

        jLabel2.setText("Medication ID :");

        jLabel3.setText("Patient ID :");

        jLabel4.setText("Medication Name :");

        jLabel5.setText("Dosage :");

        jLabel6.setText("Dosage Units :");

        jLabel7.setText("Dosage Frequency :");

        jLabel8.setText("Medication Start Date :");

        jLabel9.setText("Medication End Date :");

        jLabel10.setText("Instructions :");

        jLabel11.setText("Prescribed By :");

        jLabel12.setText("All Medications:");

        jLabel14.setText("Patient ID:");

        medIDTB.setEnabled(false);

        dosageFrequencyTB.setNextFocusableComponent(medStartDateTB);

        medStartDateTB.setNextFocusableComponent(medEndDateTB);

        medEndDateTB.setNextFocusableComponent(instructionsTB);

        instructionsTB.setNextFocusableComponent(prescribedByTB);

        prescribedByTB.setNextFocusableComponent(medicationsPatientIDTB);

        addMedButton.setText("Add Record");
        addMedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMedButtonMouseClicked(evt);
            }
        });

        modifyMedButton.setText("Modify");
        modifyMedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modifyMedButtonMouseClicked(evt);
            }
        });

        deleteMedButton.setText("Delete");
        deleteMedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMedButtonMouseClicked(evt);
            }
        });

        saveMedButton.setText("Save");
        saveMedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMedButtonMouseClicked(evt);
            }
        });

        cancelMedButton.setText("Cancel");
        cancelMedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelMedButtonMouseClicked(evt);
            }
        });

        medsEncountersPageButton.setText("Go To Encounters");
        medsEncountersPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medsEncountersPageButtonMouseClicked(evt);
            }
        });

        medsPatientDemPageButton.setText("Go To Patients");
        medsPatientDemPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medsPatientDemPageButtonMouseClicked(evt);
            }
        });

        medsVSignsPageButton.setText("Go To Vital Signs");
        medsVSignsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medsVSignsPageButtonMouseClicked(evt);
            }
        });

        medsReportsPageButton.setText("Go To Reports");
        medsReportsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medsReportsPageButtonMouseClicked(evt);
            }
        });

        medLabsPageButton.setText("Go To Labs");
        medLabsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medLabsPageButtonMouseClicked(evt);
            }
        });

        medicationsPatientIDBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        medicationsPatientIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                medicationsPatientIDBoxItemStateChanged(evt);
            }
        });

        medListBox.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        medListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                medListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(medListBox);

        dosageUnitsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(medNameLabel)
                                        .addGap(198, 198, 198))
                                    .addComponent(medGenderLabel))
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel4))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(medNameTB))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dosageTB)
                                            .addComponent(dosageUnitsBox, 0, 176, Short.MAX_VALUE)
                                            .addComponent(dosageFrequencyTB)
                                            .addComponent(medStartDateTB)
                                            .addComponent(medEndDateTB)
                                            .addComponent(instructionsTB)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(prescribedByTB))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(medicationsPatientIDTB, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(medIDTB))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel14))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1)
                                                .addGap(74, 74, 74))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(modifyMedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(saveMedButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(deleteMedButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(addMedButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(cancelMedButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(medsEncountersPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(medsPatientDemPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(medsVSignsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(medsReportsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(medLabsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(84, 84, 84))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(54, 54, 54)
                                                .addComponent(medAgeLabel))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(medicationsPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap())))
                            .addComponent(medErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(278, 278, 278))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medGenderLabel)
                    .addComponent(medNameLabel)
                    .addComponent(medAgeLabel))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(medIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medicationsPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(medicationsPatientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(medNameTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dosageTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(dosageUnitsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dosageFrequencyTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medStartDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medEndDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(instructionsTB, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prescribedByTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medsPatientDemPageButton)
                            .addComponent(modifyMedButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medsEncountersPageButton)
                            .addComponent(addMedButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medsVSignsPageButton)
                            .addComponent(deleteMedButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medsReportsPageButton)
                            .addComponent(saveMedButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medLabsPageButton)
                            .addComponent(cancelMedButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(medErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void medsEncountersPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medsEncountersPageButtonMouseClicked
        this.setVisible(false);
        new Encounters().setVisible(true);
    }//GEN-LAST:event_medsEncountersPageButtonMouseClicked

    private void medsVSignsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medsVSignsPageButtonMouseClicked
        this.setVisible(false);
        new VitalSigns().setVisible(true);
    }//GEN-LAST:event_medsVSignsPageButtonMouseClicked

    private void medsPatientDemPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medsPatientDemPageButtonMouseClicked
        this.setVisible(false);
        new PatientDemographics().setVisible(true);
    }//GEN-LAST:event_medsPatientDemPageButtonMouseClicked

    private void medsReportsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medsReportsPageButtonMouseClicked
        this.setVisible(false);
        new Reports().setVisible(true);
    }//GEN-LAST:event_medsReportsPageButtonMouseClicked

    private void medLabsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medLabsPageButtonMouseClicked
        this.setVisible(false);
        new LabsProcedures().setVisible(true);
    }//GEN-LAST:event_medLabsPageButtonMouseClicked

    private void modifyMedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyMedButtonMouseClicked
        medErrorLabel.setText("");    
        formEnabled = false;
        enableForm(formEnabled);
        formEnabled = true;
    }//GEN-LAST:event_modifyMedButtonMouseClicked

    private void cancelMedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelMedButtonMouseClicked
        medErrorLabel.setText("");    
        formEnabled = true;
        enableForm(formEnabled);
        formEnabled = false;
    }//GEN-LAST:event_cancelMedButtonMouseClicked

    private void medicationsPatientIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_medicationsPatientIDBoxItemStateChanged
        this.patientID = medicationsPatientIDBox.getSelectedItem().toString();
        PatientDemographics.setPatientID(patientID);
        medListBox.removeAll();
        populateAllList();
        setMedication();
    }//GEN-LAST:event_medicationsPatientIDBoxItemStateChanged

    private void addMedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMedButtonMouseClicked
        medErrorLabel.setText("");
        String medIDNum = "";
        String patientIDNum = "";
        String medName = "";
        String dosage = "";
        String units = "";
        String frequency = "";
        String startDate = "";
        String endDate = "";
        String instructions = "";
        String prescribedBy = "";
        String currentMed = "";
        if((isNumeric(medicationsPatientIDTB.getText()))
                && (medicationsPatientIDTB.getText().length() == 4)
                && (medNameTB.getText().length() <= 20)
                && (medNameTB.getText().length() >= 2)
                && (dosageTB.getText().length() >= 2)
                && (dosageTB.getText().length() <= 15)
                && (dosageFrequencyTB.getText().length() <= 30)
                && (dosageFrequencyTB.getText().length() >= 2)
                && (medStartDateTB.getText().length() <= 10)
                && (medStartDateTB.getText().length() >= 8)
                && (medEndDateTB.getText().length() <= 10)
                && (medEndDateTB.getText().length() >= 8)
                && (instructionsTB.getText().length() <= 63)
                && (instructionsTB.getText().length() >= 1)
                && (prescribedByTB.getText().length() <= 20)
                && (prescribedByTB.getText().length() >= 2))
        {
            try 
            {
                
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                String query = "SELECT * FROM medication WHERE PATIENTID ='" 
                        + medicationsPatientIDTB.getText() + "' AND MEDNAME ='" 
                        + medNameTB.getText() 
                        + "' AND MEDSTARTDATE ='" + medStartDateTB.getText() + "'";
                ResultSet rs = stmt.executeQuery(query);
                if(rs.next())
                {
                   
                    con.close();
                    medErrorLabel.setText("Medication Record Already Exists");
                }
                else
                {
                    medIDNum = medIDTB.getText();
                    medName = medNameTB.getText();
                    dosage = dosageTB.getText();
                    units = dosageUnitsBox.getSelectedItem().toString();
                    frequency = dosageFrequencyTB.getText();
                    startDate = medStartDateTB.getText();
                    endDate = medEndDateTB.getText();
                    instructions = instructionsTB.getText();
                    prescribedBy = prescribedByTB.getText();
                    //insert query
                    if (addMedication(patientID, medName,dosage, 
                        units, frequency, startDate, 
                        endDate, instructions, prescribedBy))
                    {
                        con.close();
                        //populateComboBox();
                        medErrorLabel.setText("Medication Record Created.");
                    }
                    else
                    {
                        con.close();
                        medErrorLabel.setText("Unable to add medication "
                               + "to database.");
                    }  
                  
                }
                
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                e.printStackTrace();
            }
        }
        else
        {
            medErrorLabel.setText("Please correctly enter the fields provided. ");
        }
    }//GEN-LAST:event_addMedButtonMouseClicked

    private void deleteMedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMedButtonMouseClicked
        medErrorLabel.setText("");
        boolean deleted = false;
        Connection con = null;
        Statement stmt = null;
        try 
        {
            String query = "DELETE FROM medication WHERE PATIENTID ='" 
                    + medicationsPatientIDTB.getText() 
                    + "' AND MEDICATIONID ='" + medIDTB.getText() + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(dbUrl, "root", "root");
            stmt = con.createStatement();
            stmt.execute(query);
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //not found or couldnt connect
            e.printStackTrace();
            medErrorLabel.setText("Problem deleting record from database.");
        }  
        finally
        {
            try
            {
                stmt.close();
                con.close();
                medListBox.removeAll();
                populateAllList();
                setMedication();
                medErrorLabel.setText("Medication Record Successfully Deleted.");
            }
            catch (Exception e) 
            {
                //Problem closing statement or connection
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteMedButtonMouseClicked

    private void saveMedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMedButtonMouseClicked
        medErrorLabel.setText("");
        String medIDNum = "";
        String patientIDNum = "";
        String medName = "";
        String dosage = "";
        String units = "";
        String frequency = "";
        String startDate = "";
        String endDate = "";
        String instructions = "";
        String prescribedBy = "";
        String currentMed = "";

        if((isNumeric(medicationsPatientIDTB.getText()))
                && (medicationsPatientIDTB.getText().length() == 4)
                && (medNameTB.getText().length() <= 20)
                && (medNameTB.getText().length() >= 2)
                && (dosageTB.getText().length() >= 2)
                && (dosageTB.getText().length() <= 15)
                && (dosageFrequencyTB.getText().length() <= 30)
                && (dosageFrequencyTB.getText().length() >= 2)
                && (medStartDateTB.getText().length() <= 10)
                && (medStartDateTB.getText().length() >= 8)
                && (medEndDateTB.getText().length() <= 10)
                && (medEndDateTB.getText().length() >= 8)
                && (instructionsTB.getText().length() <= 63)
                && (instructionsTB.getText().length() >= 1)
                && (prescribedByTB.getText().length() <= 20)
                && (prescribedByTB.getText().length() >= 2))
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();

                patientID = medicationsPatientIDTB.getText();
                medIDNum = medIDTB.getText();
                medName = medNameTB.getText();
                dosage = dosageTB.getText();
                units = dosageUnitsBox.getSelectedItem().toString();
                frequency = dosageFrequencyTB.getText();
                startDate = medStartDateTB.getText();
                endDate = medEndDateTB.getText();
                instructions = instructionsTB.getText();
                prescribedBy = prescribedByTB.getText();
                
                //insert query
                if(updateMedication(patientID, medName, dosage, units, 
                        frequency, startDate, endDate, instructions,
                        prescribedBy))
                {
                    con.close();
                    medicationsPatientIDBox.removeAll();
                    populateComboBox();
                    
                    medicationsPatientIDBox.setSelectedItem(patientID);
                    PatientDemographics.setPatientID(patientID);
                    setMedication();
                    
                    medListBox.removeAll();
                    populateAllList();
                    medSelect(medName, startDate, endDate);
                    medErrorLabel.setText("Medication Record Updated.");
                }
                else
                {
                    con.close();
                    medErrorLabel.setText("Unable to update medication.");                    
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                medErrorLabel.setText("Problem connecting to database.");
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveMedButtonMouseClicked

    private void medListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_medListBoxValueChanged
        String medSelect = medListBox.getSelectedValue().toString();
        String[] parts = medSelect.split(" --- ");
        String medName = parts[0];
        String startDate = parts[1];
        String endDate = parts[2];
        medSelect(medName, startDate, endDate);
        
    }//GEN-LAST:event_medListBoxValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Medications.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Medications.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Medications.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Medications.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Medications().setVisible(true);
            }
        });
    } 
    private void enableForm(boolean formEnabled)
    {
        if(formEnabled == false)
        {
            medicationsPatientIDTB.setEnabled(true);
            medNameTB.setEnabled(true);
            dosageUnitsBox.setEnabled(true);
            dosageFrequencyTB.setEnabled(true);
            medStartDateTB.setEnabled(true);
            medEndDateTB.setEnabled(true);
            instructionsTB.setEnabled(true);
            prescribedByTB.setEnabled(true);
            dosageTB.setEnabled(true);
            addMedButton.setEnabled(true);
            deleteMedButton.setEnabled(true);
            saveMedButton.setEnabled(true);
            cancelMedButton.setEnabled(true);
            modifyMedButton.setEnabled(false);
            medsPatientDemPageButton.setEnabled(false);
            medsVSignsPageButton.setEnabled(false);
            medsEncountersPageButton.setEnabled(false);
            medsReportsPageButton.setEnabled(false);
            medLabsPageButton.setEnabled(false);
            medicationsPatientIDTB.requestFocusInWindow();
        }
        else
        {
            medicationsPatientIDTB.setEnabled(false);
            medNameTB.setEnabled(false);
            dosageUnitsBox.setEnabled(false);
            dosageFrequencyTB.setEnabled(false);
            medStartDateTB.setEnabled(false);
            medEndDateTB.setEnabled(false);
            instructionsTB.setEnabled(false);
            prescribedByTB.setEnabled(false);
            dosageTB.setEnabled(false);
            addMedButton.setEnabled(false);
            deleteMedButton.setEnabled(false);
            saveMedButton.setEnabled(false);
            cancelMedButton.setEnabled(false);
            modifyMedButton.setEnabled(true);
            medsPatientDemPageButton.setEnabled(true);
            medsVSignsPageButton.setEnabled(true);
            medsEncountersPageButton.setEnabled(true);
            medsReportsPageButton.setEnabled(true);
            medLabsPageButton.setEnabled(true);
        }
    }
    public static boolean isNumeric(String str)  
    {  
        try  
        {  
            Long.parseLong(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }
    public void populateComboBox()
    {
        ArrayList<String> medications = new ArrayList<String>();
        try
        {
            String query = "SELECT PATIENTID FROM patients";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            while(rs.next())
            {
                String id = rs.getString("PATIENTID");
                medications.add(id);
            }
            DefaultComboBoxModel list = new DefaultComboBoxModel(medications.toArray());
            medicationsPatientIDBox.setModel(list);
            con.close();
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connnecting or querying
            medErrorLabel.setText("Error populating patient ID selection box.");
            e.printStackTrace();
        }
    }
    public void setMedication()
    {
        medErrorLabel.setText("");
        String medIDNum = "";
        String medName = "";
        String dosage = "";
        String units = "";
        String frequency= "";
        String startDate = "";
        String endDate = "";
        String instructions = "";
        String prescribedBy = "";
        
        try 
        {
            String query = "SELECT * FROM medication WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                medIDNum = Long.toString(rs.getLong(2));
                medName = rs.getString(3);
                dosage = rs.getString(4);
                units = rs.getString(5);
                frequency = rs.getString(6);
                startDate = rs.getString(7);
                endDate = rs.getString(8);
                instructions = rs.getString(9);
                prescribedBy = rs.getString(10);
                medicationsPatientIDTB.setText(medicationsPatientIDBox.getSelectedItem().toString());
                medIDTB.setText(medIDNum);
                medNameTB.setText(medName);
                dosageTB.setText(dosage);
                dosageUnitsBox.setSelectedItem(units);
                dosageFrequencyTB.setText(frequency);
                medStartDateTB.setText(startDate);
                medEndDateTB.setText(endDate);
                instructionsTB.setText(instructions);
                prescribedByTB.setText(prescribedBy);
                con.close();
            }
            else
            {
                con.close();
                medIDTB.setText("");
                medNameTB.setText("");
                dosageTB.setText("");
                dosageFrequencyTB.setText("");
                medStartDateTB.setText("");
                medEndDateTB.setText("");
                instructionsTB.setText("");
                prescribedByTB.setText("");
                medErrorLabel.setText("No medications found for this patient.");    
            }                                
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connecting or querying
            medErrorLabel.setText("Error connecting to database.");
            e.printStackTrace();
        } 
        try
        {
            String age = "";
            String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query); 
            if(rs.next())
            {
                String lastName = rs.getString("LASTNAME");
                String firstName = rs.getString("FIRSTNAME");
                String gender = rs.getString("GENDER");
                try
                {
                    int bdayNum = calcAge();
                    age = Integer.toString(bdayNum);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                    medNameLabel.setText(firstName + " " + lastName);
                    medGenderLabel.setText(gender);
                    medAgeLabel.setText(age);     
                }
            else
            {
                con.close();
                medErrorLabel.setText("Error finding patient info for "
                    + "header.");   
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            medErrorLabel.setText("Error Connecting to Database.");
        }
    }
    public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
        Calendar now = Calendar.getInstance();
        Calendar dob = Calendar.getInstance();
        try 
        {
            String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                bday = rs.getString("BIRTH_DATE");
                SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
                dob.setTime(sdf.parse(bday));
                int year1 = now.get(Calendar.YEAR);
                int year2 = dob.get(Calendar.YEAR);
                age = year1 - year2;
                int month1 = now.get(Calendar.MONTH);
                int month2 = dob.get(Calendar.MONTH);
                if (month2 > month1) 
                {
                    age--;
                } 
                else if (month1 == month2) 
                {
                    int day1 = now.get(Calendar.DAY_OF_MONTH);
                    int day2 = dob.get(Calendar.DAY_OF_MONTH);
                    if (day2 > day1) 
                    {
                        age--;
                    }
                }
                return age;
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            medErrorLabel.setText("Age not found.");
        }
        return age; 
    }
    public void populateUnitsBox()
    {
        medErrorLabel.setText("");
        String unitType = "";
        ArrayList<String> unitTypeList = new ArrayList<String>();
        unitTypeList.add("Pill");
        unitTypeList.add("Capsule");
        unitTypeList.add("Liquid Solution");
        unitTypeList.add("Inhalational");
        unitTypeList.add("Parenteral");
        unitTypeList.add("Suppository");
        unitTypeList.add("Topical");
        unitTypeList.add("Herbal Plant");
        unitTypeList.add("Powder");
        unitTypeList.add("Food");
        DefaultComboBoxModel list = new DefaultComboBoxModel(unitTypeList.toArray());
        dosageUnitsBox.setModel(list);
    }
    public boolean addMedication(String patientID, 
            String medName, String dosage, String units, 
            String frequency, String startDate, String endDate, String instructions, 
            String prescribedBy)
    {
        boolean result = false;
        try
        {
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("INSERT INTO medication"
                    + " (PATIENTID, MEDNAME, DOSAGE, DOSAGEUNITS, "
                    + "DOSAGEFREQUENCY, MEDSTARTDATE, MEDENDDATE, "
                    + "INSTRUCTIONS, PRESCRIBEDBY) VALUES "
                    + "(?, ?, ?, ?, ?, ?, ?, ?, ?)");
            stmt.setString(1, patientID);
            stmt.setString(2, medName);
            stmt.setString(3, dosage);
            stmt.setString(4, units);
            stmt.setString(5, frequency);
            stmt.setString(6, startDate);
            stmt.setString(7, endDate);
            stmt.setString(8, instructions);
            stmt.setString(9, prescribedBy);
            int rowcount = stmt.executeUpdate();
            result = rowcount == 1;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            medErrorLabel.setText("");
            result = false;
        }
        return result;
    }
    public boolean updateMedication(String patientID, String medName, 
            String dosage, String units, String frequency, 
            String startDate, String endDate, String instructions, 
            String prescribedBy)
    {
        boolean result = false;
        try
        {
            long patientIDNum = Long.parseLong(patientID);
            String medID = medIDTB.getText();
            
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            
            PreparedStatement stmt = con.prepareStatement("UPDATE medication "
                    + "SET PATIENTID = ?, MEDNAME = ?, DOSAGE = ?, "
                    + "DOSAGEUNITS = ?, DOSAGEFREQUENCY = ?, MEDSTARTDATE = ?, "
                    + "MEDENDDATE = ?, INSTRUCTIONS = ?, PRESCRIBEDBY = ? "
                    + "WHERE MEDICATIONID ='" + medID + "'");
            stmt.setLong(1, patientIDNum);
            stmt.setString(2, medName);
            stmt.setString(3, dosage);
            stmt.setString(4, units);
            stmt.setString(5, frequency);
            stmt.setString(6, startDate);
            stmt.setString(7, endDate);
            stmt.setString(8, instructions);
            stmt.setString(9, prescribedBy);
            
            int rowcount = stmt.executeUpdate();
            result = rowcount > 0;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            medErrorLabel.setText("update error");
            result = false;
        }
        return result;
    }
    public void populateAllList()
    {
        medErrorLabel.setText("");
        ArrayList<String> allMedList = new ArrayList<String>();
        String medName = "";
        String startDate = "";
        String endDate = "";
         
        try
        {
            String query = "SELECT * FROM medication WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next())
            {
                medName = rs.getString("MEDNAME");
                startDate = rs.getString("MEDSTARTDATE");
                endDate = rs.getString("MEDENDDATE");
                allMedList.add(medName + " --- " + startDate + " --- " + endDate);
            }
            medListBox.setListData(allMedList.toArray());
            con.close();
            
        }
        catch(Exception e)
        {
            medErrorLabel.setText("Error populating lab list.");
        }
        
    }
    public void medSelect(String medName, String startDate, String endDate)
    {
        medErrorLabel.setText("");
        String medIDNum = "";
        long medID; 
        
        String dosage = "";
        String units = "";
        String frequency= "";
        
        
        String instructions = "";
        String prescribedBy = "";
        try 
        {
            String query = "SELECT * FROM medication WHERE PATIENTID ='" 
                + patientID + "' AND MEDNAME ='" + medName 
                    + "' AND MEDSTARTDATE ='" + startDate 
                    + "' AND MEDENDDATE ='" + endDate + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    //get columns
                    medID = rs.getLong("MEDICATIONID");
                    dosage = rs.getString("DOSAGE");
                    units = rs.getString("DOSAGEUNITS");
                    frequency = rs.getString("DOSAGEFREQUENCY");
                    instructions = rs.getString("INSTRUCTIONS");
                    prescribedBy = rs.getString("PRESCRIBEDBY");
                    
                    //set text 
                    medicationsPatientIDTB.setText(patientID);
                    medIDTB.setText(Long.toString(medID));
                    medNameTB.setText(medName);
                    dosageTB.setText(dosage);
                    dosageUnitsBox.setSelectedItem(units);
                    medStartDateTB.setText(startDate);
                    medEndDateTB.setText(endDate);
                    instructionsTB.setText(instructions);
                    prescribedByTB.setText(prescribedBy);
                } 
                con.close();
            }
            else
            {
                con.close();
                
                medIDTB.setText("");
                medNameTB.setText("");
                dosageTB.setText("");
                dosageFrequencyTB.setText("");
                medStartDateTB.setText("");
                medEndDateTB.setText("");
                instructionsTB.setText("");
                prescribedByTB.setText("");
                medErrorLabel.setText("Medication not found or holds no data.");
            }
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            medErrorLabel.setText("error displaying med info");
        }       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMedButton;
    private javax.swing.JButton cancelMedButton;
    private javax.swing.JButton deleteMedButton;
    private javax.swing.JTextField dosageFrequencyTB;
    private javax.swing.JTextField dosageTB;
    private javax.swing.JComboBox dosageUnitsBox;
    private javax.swing.JTextField instructionsTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel medAgeLabel;
    private javax.swing.JTextField medEndDateTB;
    private javax.swing.JLabel medErrorLabel;
    private javax.swing.JLabel medGenderLabel;
    private javax.swing.JTextField medIDTB;
    private javax.swing.JButton medLabsPageButton;
    private javax.swing.JList medListBox;
    private javax.swing.JLabel medNameLabel;
    private javax.swing.JTextField medNameTB;
    private javax.swing.JTextField medStartDateTB;
    private javax.swing.JComboBox medicationsPatientIDBox;
    private javax.swing.JTextField medicationsPatientIDTB;
    private javax.swing.JButton medsEncountersPageButton;
    private javax.swing.JButton medsPatientDemPageButton;
    private javax.swing.JButton medsReportsPageButton;
    private javax.swing.JButton medsVSignsPageButton;
    private javax.swing.JButton modifyMedButton;
    private javax.swing.JTextField prescribedByTB;
    private javax.swing.JButton saveMedButton;
    // End of variables declaration//GEN-END:variables
}