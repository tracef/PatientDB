/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;


public class VitalSigns extends javax.swing.JFrame 
{
    
    private void enableForm(boolean formEnabled)
    {
        if(formEnabled == false)
        {
            vitalAddButton.setEnabled(true);
            vitalModifyButton.setEnabled(false);
            vitalDeleteButton.setEnabled(true);
            vitalSaveButton.setEnabled(true);
            vitalCancelButton.setEnabled(true);
            vSignMedPageButton.setEnabled(false);
            vSignsEncounterPageButton.setEnabled(false);
            vSignsPatientDemPageButton.setEnabled(false);
            vSignsReportsPageButton.setEnabled(false);
            labsPageButton.setEnabled(false);
            
            vitalPatientIDTB.setEnabled(true);
            heightTB.setEnabled(true);
            weightTB.setEnabled(true);
            heartRateTB.setEnabled(true);
            bloodPressureTB.setEnabled(true);
            temperatureTB.setEnabled(true);
            vitalDateTimeTB.setEnabled(true);
            vitalPatientIDTB.requestFocusInWindow();
        }
        else
        {
            vitalAddButton.setEnabled(false);
            vitalModifyButton.setEnabled(true);
            vitalDeleteButton.setEnabled(false);
            vitalSaveButton.setEnabled(false);
            vitalCancelButton.setEnabled(false);
            vSignMedPageButton.setEnabled(true);
            vSignsEncounterPageButton.setEnabled(true);
            vSignsPatientDemPageButton.setEnabled(true);
            vSignsReportsPageButton.setEnabled(true);
            labsPageButton.setEnabled(true);
            
            vitalPatientIDTB.setEnabled(false);
            heightTB.setEnabled(false);
            weightTB.setEnabled(false);
            heartRateTB.setEnabled(false);
            bloodPressureTB.setEnabled(false);
            temperatureTB.setEnabled(false);
            vitalDateTimeTB.setEnabled(false);
        }
    }
    static String patientID = "";
    boolean formEnabled = true;
    /**
     * Creates new form VitalSigns
     */
    public VitalSigns() {
        initComponents();
        populateComboBox();
        if(!PatientDemographics.getPatientID().isEmpty())
        {
            this.patientID = PatientDemographics.getPatientID();
            vitalPatientIDBox.setSelectedItem(patientID);
        }
        else
        {
            
            this.patientID = vitalPatientIDBox.getSelectedItem().toString();
        }
        populateAllList();
        setVitalSigns();
        enableForm(formEnabled);
        formEnabled = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        vitalNameLabel = new javax.swing.JLabel();
        vitalGenderLabel = new javax.swing.JLabel();
        vitalAgeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        vitalIDTB = new javax.swing.JTextField();
        vitalPatientIDTB = new javax.swing.JTextField();
        heightTB = new javax.swing.JTextField();
        weightTB = new javax.swing.JTextField();
        heartRateTB = new javax.swing.JTextField();
        bloodPressureTB = new javax.swing.JTextField();
        temperatureTB = new javax.swing.JTextField();
        vitalDateTimeTB = new javax.swing.JTextField();
        vitalAddButton = new javax.swing.JButton();
        vitalModifyButton = new javax.swing.JButton();
        vitalDeleteButton = new javax.swing.JButton();
        vitalSaveButton = new javax.swing.JButton();
        vitalCancelButton = new javax.swing.JButton();
        vSignMedPageButton = new javax.swing.JButton();
        vSignsEncounterPageButton = new javax.swing.JButton();
        vSignsPatientDemPageButton = new javax.swing.JButton();
        vSignsReportsPageButton = new javax.swing.JButton();
        labsPageButton = new javax.swing.JButton();
        vitalPatientIDBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vitalListBox = new javax.swing.JList();
        vitalErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Vital Signs");

        vitalNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vitalNameLabel.setForeground(new java.awt.Color(255, 0, 204));
        vitalNameLabel.setText("jLabel2");

        vitalGenderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vitalGenderLabel.setForeground(new java.awt.Color(255, 0, 204));
        vitalGenderLabel.setText("jLabel3");

        vitalAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vitalAgeLabel.setForeground(new java.awt.Color(255, 0, 204));
        vitalAgeLabel.setText("jLabel4");

        jLabel2.setText("Vital Signs ID :");

        jLabel3.setText("Patient ID :");

        jLabel4.setText("Height :");

        jLabel5.setText("Weight :");

        jLabel6.setText("Heart Rate :");

        jLabel7.setText("Blood Pressure :");

        jLabel8.setText("Temperature :");

        jLabel9.setText("Date / Time :");

        vitalIDTB.setEditable(false);
        vitalIDTB.setText("jTextField1");
        vitalIDTB.setEnabled(false);

        vitalPatientIDTB.setText("jTextField1");
        vitalPatientIDTB.setNextFocusableComponent(heightTB);

        heightTB.setText("jTextField1");
        heightTB.setNextFocusableComponent(weightTB);

        weightTB.setText("jTextField1");
        weightTB.setNextFocusableComponent(heartRateTB);

        heartRateTB.setText("jTextField1");
        heartRateTB.setNextFocusableComponent(bloodPressureTB);

        bloodPressureTB.setText("jTextField1");
        bloodPressureTB.setNextFocusableComponent(temperatureTB);

        temperatureTB.setText("jTextField1");
        temperatureTB.setNextFocusableComponent(vitalDateTimeTB);

        vitalDateTimeTB.setText("jTextField1");
        vitalDateTimeTB.setNextFocusableComponent(vitalPatientIDTB);

        vitalAddButton.setText("Add Record");
        vitalAddButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalAddButtonMouseClicked(evt);
            }
        });

        vitalModifyButton.setText("Modify");
        vitalModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalModifyButtonMouseClicked(evt);
            }
        });

        vitalDeleteButton.setText("Delete");
        vitalDeleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalDeleteButtonMouseClicked(evt);
            }
        });

        vitalSaveButton.setText("Save");
        vitalSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalSaveButtonMouseClicked(evt);
            }
        });

        vitalCancelButton.setText("Cancel");
        vitalCancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vitalCancelButtonMouseClicked(evt);
            }
        });

        vSignMedPageButton.setText("Go To Medications");
        vSignMedPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vSignMedPageButtonMouseClicked(evt);
            }
        });

        vSignsEncounterPageButton.setText("Go To Encounters");
        vSignsEncounterPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vSignsEncounterPageButtonMouseClicked(evt);
            }
        });

        vSignsPatientDemPageButton.setText("Go To Patient");
        vSignsPatientDemPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vSignsPatientDemPageButtonMouseClicked(evt);
            }
        });

        vSignsReportsPageButton.setText("Go To Reports");
        vSignsReportsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vSignsReportsPageButtonMouseClicked(evt);
            }
        });

        labsPageButton.setText("Go To Labs");
        labsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labsPageButtonMouseClicked(evt);
            }
        });

        vitalPatientIDBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        vitalPatientIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vitalPatientIDBoxItemStateChanged(evt);
            }
        });

        jLabel11.setText("Patient ID:");

        vitalListBox.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        vitalListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vitalListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(vitalListBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vitalErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(vitalDateTimeTB, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(temperatureTB, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bloodPressureTB))
                                        .addGap(66, 66, 66))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(vitalIDTB, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                        .addComponent(vitalPatientIDTB)
                                        .addComponent(weightTB)
                                        .addComponent(heartRateTB))
                                    .addComponent(heightTB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vitalPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vitalAddButton)
                                    .addComponent(vitalModifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vitalDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vitalSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vitalCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vSignsPatientDemPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vSignsEncounterPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vSignMedPageButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(vSignsReportsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(vitalNameLabel)
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(vitalGenderLabel)
                                .addGap(131, 131, 131)
                                .addComponent(vitalAgeLabel)))))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vitalNameLabel)
                    .addComponent(vitalGenderLabel)
                    .addComponent(vitalAgeLabel))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vitalAddButton)
                            .addComponent(vitalPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(vitalModifyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vitalDeleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vitalSaveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vitalCancelButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vSignMedPageButton)
                        .addGap(12, 12, 12)
                        .addComponent(vSignsEncounterPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vSignsPatientDemPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vSignsReportsPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labsPageButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(vitalIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(vitalPatientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(heightTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(weightTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(heartRateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(bloodPressureTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(temperatureTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(vitalDateTimeTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vitalErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vSignsPatientDemPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vSignsPatientDemPageButtonMouseClicked
        this.setVisible(false);
        new PatientDemographics().setVisible(true);
    }//GEN-LAST:event_vSignsPatientDemPageButtonMouseClicked

    private void vSignMedPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vSignMedPageButtonMouseClicked
        this.setVisible(false);
        new Medications().setVisible(true);
    }//GEN-LAST:event_vSignMedPageButtonMouseClicked

    private void vSignsEncounterPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vSignsEncounterPageButtonMouseClicked
        this.setVisible(false);
        new Encounters().setVisible(true);
    }//GEN-LAST:event_vSignsEncounterPageButtonMouseClicked

    private void vSignsReportsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vSignsReportsPageButtonMouseClicked
        this.setVisible(false);
        new Reports().setVisible(true);
    }//GEN-LAST:event_vSignsReportsPageButtonMouseClicked

    private void labsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labsPageButtonMouseClicked
        this.setVisible(false);
        new LabsProcedures().setVisible(true);
    }//GEN-LAST:event_labsPageButtonMouseClicked

    private void vitalModifyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalModifyButtonMouseClicked
        formEnabled = false;
        enableForm(formEnabled);
        formEnabled = true;
    }//GEN-LAST:event_vitalModifyButtonMouseClicked

    private void vitalCancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalCancelButtonMouseClicked
        formEnabled = true;
        enableForm(formEnabled);
        formEnabled = false;
    }//GEN-LAST:event_vitalCancelButtonMouseClicked

    private void vitalPatientIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vitalPatientIDBoxItemStateChanged
        if(vitalPatientIDBox.getItemCount() > 0)
        {
            this.patientID = vitalPatientIDBox.getSelectedItem().toString();
        }
        PatientDemographics.setPatientID(patientID);
        vitalPatientIDTB.setText(patientID);
        vitalListBox.removeAll();
        populateAllList();
        setVitalSigns();
    }//GEN-LAST:event_vitalPatientIDBoxItemStateChanged

    private void vitalAddButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalAddButtonMouseClicked
        vitalErrorLabel.setText("");
        String vitalSignsID = "";
        String height = "";
        String weight = "";
        String heartRate = "";
        String bloodPressure = "";
        String temperature = "";
        String dateNTime = "";
        String prevVitalSigns = "";
        if((isNumeric(vitalPatientIDTB.getText())
                && (vitalPatientIDTB.getText().length() == 4)
                && (heightTB.getText().length() > 1) 
                && (heightTB.getText().length() <= 10) 
                && (weightTB.getText().length() > 1)
                && (weightTB.getText().length() <= 10)
                && (heartRateTB.getText().length() > 1)
                && (heartRateTB.getText().length() <= 10)
                && (bloodPressureTB.getText().length() > 1)
                && (bloodPressureTB.getText().length() <= 14)
                && (temperatureTB.getText().length() > 1)
                && (temperatureTB.getText().length() <= 6) 
                && (vitalDateTimeTB.getText().length() <= 10)
                && (vitalDateTimeTB.getText().length() >= 8)))
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                String query = "SELECT * FROM vitalsigns WHERE PATIENTID ='" 
                        + patientID + "' AND DATENTIME ='" 
                        + vitalDateTimeTB.getText() + "'";
                ResultSet rs = stmt.executeQuery(query);
                    if(rs.isBeforeFirst())
                    {
                        con.close();
                        vitalErrorLabel.setText("Vita Already Exists");
                    }
                    else
                    {
                        vitalSignsID = vitalIDTB.getText();
                        height = heightTB.getText();
                        weight = weightTB.getText();
                        heartRate = heartRateTB.getText();
                        bloodPressure = bloodPressureTB.getText();
                        temperature = temperatureTB.getText();
                        dateNTime = vitalDateTimeTB.getText();
                       
                        //insert query
                        if(addVitalSigns(patientID, height, 
                            weight, heartRate, bloodPressure, 
                            temperature, dateNTime))
                        {
                            con.close();
                            
                            vitalPatientIDBox.removeAllItems();
                            populateComboBox();
                            setVitalSigns();
                            vitalListBox.removeAll();
                            populateAllList();
                            vitalErrorLabel.setText("Vital Record Created.");
                        }
                        else
                        {
                            con.close();
                            vitalErrorLabel.setText("Unable to add vital record "
                                    + "to database.");
                        }  
                    
                }
                
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                e.printStackTrace();
                
            }
        }
        else
        {
            vitalErrorLabel.setText("Please correctly enter the fields provided. ");
        }
    }//GEN-LAST:event_vitalAddButtonMouseClicked

    private void vitalDeleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalDeleteButtonMouseClicked
        vitalErrorLabel.setText("");
        boolean deleted = false;
        Connection con = null;
        Statement stmt = null;
        try 
        {
            String query = "DELETE FROM vitalsigns WHERE PATIENTID ='" 
                    + vitalPatientIDTB.getText() + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(dbUrl, "root", "root");
            stmt = con.createStatement();
            stmt.execute(query);
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //not found or couldnt connect
            e.printStackTrace();
            vitalErrorLabel.setText("Problem deleting record from database.");
        }  
        finally
        {
            try
            {
                stmt.close();
                con.close();
                vitalListBox.removeAll();
                populateAllList();
                setVitalSigns();
                vitalErrorLabel.setText("Patient Record Successfully Deleted.");
            }
            catch (Exception e) 
            {
                //Problem closing statement or connection
                e.printStackTrace();
            }
        }  
    }//GEN-LAST:event_vitalDeleteButtonMouseClicked

    private void vitalSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vitalSaveButtonMouseClicked
        vitalErrorLabel.setText("");
        String patientID = "";
        String vitalSignsID = "";
        String height = "";
        String weight = "";
        String heartRate = "";
        String bloodPressure = "";
        String temperature = "";
        String dateNTime = "";
        
        
        if(isNumeric(vitalPatientIDTB.getText())
                && vitalPatientIDTB.getText().length() == 4
                && heightTB.getText().length() > 1 
                && heightTB.getText().length() <= 10
                && weightTB.getText().length() > 1
                && weightTB.getText().length() <= 10
                && heartRateTB.getText().length() > 1
                && heartRateTB.getText().length() <= 10
                && bloodPressureTB.getText().length() > 1
                && bloodPressureTB.getText().length() <= 12
                && temperatureTB.getText().length() > 1
                && temperatureTB.getText().length() <= 5
                && vitalDateTimeTB.getText().length() <= 10
                && vitalDateTimeTB.getText().length() >= 8)
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                patientID = vitalPatientIDTB.getText();
                vitalSignsID = vitalIDTB.getText();
                height = heightTB.getText();
                weight = weightTB.getText();
                heartRate = heartRateTB.getText();
                bloodPressure = bloodPressureTB.getText();
                temperature = temperatureTB.getText();
                dateNTime = vitalDateTimeTB.getText();
                
                //insert query
                if(updateVitalSigns(patientID, vitalSignsID, height,
                weight, heartRate, bloodPressure, temperature,
                dateNTime))
                {
                    con.close();
                    vitalPatientIDBox.removeAll();
                    populateComboBox();
                    this.patientID = patientID;
                    vitalPatientIDBox.setSelectedItem(patientID);
                    PatientDemographics.setPatientID(patientID);
                    setVitalSigns();
                    
                    vitalListBox.removeAll();
                    populateAllList();
                    
                    vitalErrorLabel.setText("Vital Record Updated.");
                }
                else
                {
                    con.close();
                    vitalErrorLabel.setText("Unable to update vital record.");                    
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                vitalErrorLabel.setText("Problem connecting to database.");
                e.printStackTrace();
            }
        }   
        else
        {
            vitalErrorLabel.setText("Please enter fields correctly.");
        }
    }//GEN-LAST:event_vitalSaveButtonMouseClicked

    private void vitalListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vitalListBoxValueChanged
        String dateTime = vitalListBox.getSelectedValue().toString();
        vitalSelect(dateTime);
    }//GEN-LAST:event_vitalListBoxValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VitalSigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VitalSigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VitalSigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VitalSigns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VitalSigns().setVisible(true);
            }
        });
    }
    public void setVitalSigns()
    {
        vitalErrorLabel.setText("");
        Long vitalSignIDNum;
        String vitalSignID = "";
        String height = "";
        String weight = "";
        String heartRate = "";
        String bloodPressure = "";
        String temperature = "";
        String dateNTime = "";
        
        String firstName = "";
        String lastName = "";
        String gender = "";
        String age = "";
        int bdayNum;
        try 
        {
            String query = "SELECT * FROM vitalsigns WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            
            if(rs.next())
            {
                vitalSignIDNum = rs.getLong(2);
                height = rs.getString(3);
                weight = rs.getString(4);
                heartRate = rs.getString(5);
                bloodPressure = rs.getString(6);
                temperature = rs.getString(7);
                dateNTime = rs.getString(8);
               
                //set text 
                vitalSignID = Long.toString(vitalSignIDNum);
                
                vitalIDTB.setText(vitalSignID);
                heightTB.setText(height);
                weightTB.setText(weight);
                heartRateTB.setText(heartRate);
                bloodPressureTB.setText(bloodPressure);
                temperatureTB.setText(temperature);
                vitalDateTimeTB.setText(dateNTime);
                 
                con.close();
            }
            else
            {
                con.close();
                
                vitalIDTB.setText("");
                heightTB.setText("");
                weightTB.setText("");
                heartRateTB.setText("");
                bloodPressureTB.setText("");
                temperatureTB.setText("");
                vitalDateTimeTB.setText("");
                vitalErrorLabel.setText("No Vital Sign Records for this Patient.");    
            }    
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connecting or querying
            e.printStackTrace();
            vitalErrorLabel.setText("No patient found.");
        }  
        try
        {
            String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query); 
            if(rs.next())
            {
                lastName = rs.getString("LASTNAME");
                firstName = rs.getString("FIRSTNAME");
                gender = rs.getString("GENDER");
                try
                {
                    bdayNum = calcAge();
                    age = Integer.toString(bdayNum);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                    vitalNameLabel.setText(firstName + " " + lastName);
                    vitalGenderLabel.setText(gender);
                    vitalAgeLabel.setText(age);     
                }
            else
            {
                con.close();
                vitalErrorLabel.setText("Error finding patient info for "
                    + "header.");   
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            vitalErrorLabel.setText("Error Connecting to Database.");
        }
    }
    public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
        Calendar now = Calendar.getInstance();
        Calendar dob = Calendar.getInstance();
        //dob.setTime(...);
        //if (dob.after(now)) {
        //throw new IllegalArgumentException("Can't be born in the future");
        //}
        try 
        {
            String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                bday = rs.getString("BIRTH_DATE");
                SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
                dob.setTime(sdf.parse(bday));

                int year1 = now.get(Calendar.YEAR);
                int year2 = dob.get(Calendar.YEAR);
                age = year1 - year2;
                int month1 = now.get(Calendar.MONTH);
                int month2 = dob.get(Calendar.MONTH);
                if (month2 > month1) 
                {
                    age--;
                } 
                else if (month1 == month2) 
                {
                    int day1 = now.get(Calendar.DAY_OF_MONTH);
                    int day2 = dob.get(Calendar.DAY_OF_MONTH);
                    if (day2 > day1) 
                    {
                        age--;
                    }
                }
                return age;
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            vitalErrorLabel.setText("Age not found.");
        }
        return age; 
    }
    public void populateComboBox()
    {
        ArrayList<String> vitalsigns = new ArrayList<String>();
        try
        {
            String query = "SELECT PATIENTID FROM patients";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            while(rs.next())
            {
                String id = rs.getString("PATIENTID");
                vitalsigns.add(id);
            }
            DefaultComboBoxModel list = new DefaultComboBoxModel(vitalsigns.toArray());
            vitalPatientIDBox.setModel(list);
            
                this.patientID = vitalPatientIDBox.getSelectedItem().toString();
            
            vitalPatientIDTB.setText(patientID);
            
            con.close();
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connnecting or querying
            vitalErrorLabel.setText("Error populating patient ID selection box.");
            e.printStackTrace();
        }
    }
    public boolean addVitalSigns(String patientID, String height, 
            String weight, String heartRate, String bloodPressure, 
            String temperature, String dateNTime)
    {
        boolean result = false;
        try
        {
            long patientIDString = Long.parseLong(patientID);
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("INSERT INTO vitalsigns"
                    + " (PATIENTID, HEIGHT, WEIGHT, HEARTRATE, BLOODPRESSURE, "
                    + "TEMPERATURE, DATENTIME) VALUES "
                    + "(?, ?, ?, ?, ?, ?, ?)");
            stmt.setLong(1, patientIDString);
            stmt.setString(2, height);
            stmt.setString(3, weight);
            stmt.setString(4, heartRate);
            stmt.setString(5, bloodPressure);
            stmt.setString(6, temperature);
            stmt.setString(7, dateNTime);
            
            int rowcount = stmt.executeUpdate();
            result = rowcount == 1;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            vitalErrorLabel.setText("");
            result = false;
        }
        return result;
    }
    public void populateAllList()
    {
        vitalErrorLabel.setText("");
        ArrayList<String> allVitalList = new ArrayList<String>();
        String vitalDateTime = "";
         
        try
        {
            String query = "SELECT DATENTIME FROM vitalsigns WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next())
            {
                vitalDateTime = rs.getString("DATENTIME");
               
                allVitalList.add(vitalDateTime);
            }
            vitalListBox.setListData(allVitalList.toArray());
            con.close();
            
        }
        catch(Exception e)
        {
            vitalErrorLabel.setText("Error populating lab list.");
        }
        
    }
    public static boolean isNumeric(String str)  
    {  
        try  
        {  
            Long.parseLong(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }
     public boolean updateVitalSigns(String patientID, String vitalSignsID, String height, 
            String weight, String heartRate, String bloodPressure, 
            String temperature, String dateNTime)
    {
        boolean result = false;
        try
        {
            long patientIDNum = Long.parseLong(patientID);
            
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("UPDATE vitalsigns"
                    + " SET PATIENTID = ?, HEIGHT = ?, WEIGHT = ?, HEARTRATE = ?, "
                    + "BLOODPRESSURE = ?, TEMPERATURE = ?, DATENTIME = ?"
                    + " WHERE VITALSIGNSID ='" + vitalSignsID + "'");
            stmt.setLong(1, patientIDNum);
            stmt.setString(2, height);
            stmt.setString(3, weight);
            stmt.setString(4, heartRate);
            stmt.setString(5, bloodPressure);
            stmt.setString(6, temperature);
            stmt.setString(7, dateNTime);
            
            int rowcount = stmt.executeUpdate();
            result = rowcount > 0;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            vitalErrorLabel.setText("Unable to update function error.");
            result = false;
        }
        return result;
    }
    public void vitalSelect(String dateTime)
    {
        vitalErrorLabel.setText("");
        String vitalSignID = "";
        long vitalSignIDNum;
       
        String height = "";
        String weight = "";
        String heartRate = "";
        String bloodPressure = "";
        String temperature = "";
        vitalIDTB.setText("");
        heightTB.setText("");
        weightTB.setText("");
        heartRateTB.setText("");
        bloodPressureTB.setText("");
        temperatureTB.setText("");
        vitalDateTimeTB.setText("");
        try 
        {
            String query = "SELECT * FROM vitalsigns WHERE PATIENTID ='" 
                + patientID + "' AND DATENTIME ='" + dateTime + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    //get columns
                    vitalSignIDNum = rs.getLong(2);
                    height = rs.getString(3);
                    weight = rs.getString(4);
                    heartRate = rs.getString(5);
                    bloodPressure = rs.getString(6);
                    temperature = rs.getString(7);
                    
                    //set text 
                    vitalSignID = Long.toString(vitalSignIDNum);
                    vitalIDTB.setText(vitalSignID);
                    heightTB.setText(height);
                    weightTB.setText(weight);
                    heartRateTB.setText(heartRate);
                    bloodPressureTB.setText(bloodPressure);
                    temperatureTB.setText(temperature);
                    vitalDateTimeTB.setText(dateTime);
                } 
                con.close();
            }
            else
            {
                con.close();
                
                vitalIDTB.setText("");
                heightTB.setText("");
                weightTB.setText("");
                heartRateTB.setText("");
                bloodPressureTB.setText("");
                temperatureTB.setText("");
                vitalDateTimeTB.setText("");
                vitalErrorLabel.setText("Lab not found or holds no data.");
            }
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            vitalErrorLabel.setText("error displaying lab info");
        }       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bloodPressureTB;
    private javax.swing.JTextField heartRateTB;
    private javax.swing.JTextField heightTB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton labsPageButton;
    private javax.swing.JTextField temperatureTB;
    private javax.swing.JButton vSignMedPageButton;
    private javax.swing.JButton vSignsEncounterPageButton;
    private javax.swing.JButton vSignsPatientDemPageButton;
    private javax.swing.JButton vSignsReportsPageButton;
    private javax.swing.JButton vitalAddButton;
    private javax.swing.JLabel vitalAgeLabel;
    private javax.swing.JButton vitalCancelButton;
    private javax.swing.JTextField vitalDateTimeTB;
    private javax.swing.JButton vitalDeleteButton;
    private javax.swing.JLabel vitalErrorLabel;
    private javax.swing.JLabel vitalGenderLabel;
    private javax.swing.JTextField vitalIDTB;
    private javax.swing.JList vitalListBox;
    private javax.swing.JButton vitalModifyButton;
    private javax.swing.JLabel vitalNameLabel;
    private javax.swing.JComboBox vitalPatientIDBox;
    private javax.swing.JTextField vitalPatientIDTB;
    private javax.swing.JButton vitalSaveButton;
    private javax.swing.JTextField weightTB;
    // End of variables declaration//GEN-END:variables
}
