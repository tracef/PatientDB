
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;


public class Reports extends javax.swing.JFrame {
    String patientID = "";
    String reportType = "";
    public Reports() {
        initComponents();
        if(!PatientDemographics.getPatientID().isEmpty())
        {
            this.patientID = PatientDemographics.getPatientID();
            
        }
        else
        {
            this.patientID = "1001";
        }
        populateReportType();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportsMedPageButton = new javax.swing.JButton();
        reportsVitalSignsPageButton = new javax.swing.JButton();
        reportsEncountersPageButton = new javax.swing.JButton();
        reportsLabsPageButton = new javax.swing.JButton();
        reportsPatientPageButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportText = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        reportsMedPageButton.setText("Go To Medications");
        reportsMedPageButton.setName("reportsMedPageButton"); // NOI18N
        reportsMedPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsMedPageButtonMouseClicked(evt);
            }
        });
        reportsMedPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsMedPageButtonActionPerformed(evt);
            }
        });

        reportsVitalSignsPageButton.setText("Go To Vital Signs");
        reportsVitalSignsPageButton.setName("reportsVitalSignsPageButton"); // NOI18N
        reportsVitalSignsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsVitalSignsPageButtonMouseClicked(evt);
            }
        });

        reportsEncountersPageButton.setText("Go To Encounters");
        reportsEncountersPageButton.setName("reportsEncountersPageButton"); // NOI18N
        reportsEncountersPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsEncountersPageButtonMouseClicked(evt);
            }
        });

        reportsLabsPageButton.setText("Go To Labs");
        reportsLabsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsLabsPageButtonMouseClicked(evt);
            }
        });

        reportsPatientPageButton.setText("Go To Patients");
        reportsPatientPageButton.setActionCommand("Go To Patient");
        reportsPatientPageButton.setName("reportsPatientPageButton"); // NOI18N
        reportsPatientPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsPatientPageButtonMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(reportText);

        reportList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        reportList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                reportListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(reportList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reportsPatientPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportsEncountersPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportsVitalSignsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportsMedPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportsLabsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reportsMedPageButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportsVitalSignsPageButton)
                                .addGap(3, 3, 3)
                                .addComponent(reportsEncountersPageButton)
                                .addGap(1, 1, 1)
                                .addComponent(reportsPatientPageButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reportsLabsPageButton)))
                        .addGap(0, 382, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reportsMedPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsMedPageButtonMouseClicked
        this.setVisible(false);
        new Medications().setVisible(true);
    }//GEN-LAST:event_reportsMedPageButtonMouseClicked

    private void reportsMedPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsMedPageButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reportsMedPageButtonActionPerformed

    private void reportsVitalSignsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsVitalSignsPageButtonMouseClicked
        this.setVisible(false);
        new VitalSigns().setVisible(true);
    }//GEN-LAST:event_reportsVitalSignsPageButtonMouseClicked

    private void reportsEncountersPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsEncountersPageButtonMouseClicked
        this.setVisible(false);
        new Encounters().setVisible(true);
    }//GEN-LAST:event_reportsEncountersPageButtonMouseClicked

    private void reportsLabsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsLabsPageButtonMouseClicked
        this.setVisible(false);
        new LabsProcedures().setVisible(true);
    }//GEN-LAST:event_reportsLabsPageButtonMouseClicked

    private void reportsPatientPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsPatientPageButtonMouseClicked
        this.setVisible(false);
        new PatientDemographics().setVisible(true);
    }//GEN-LAST:event_reportsPatientPageButtonMouseClicked

    private void reportListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_reportListValueChanged
        
        this.reportType = reportList.getSelectedValue().toString();
        selectReport(reportType);
       // populateReport();
    }//GEN-LAST:event_reportListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }
    public void populateReportType()
    {
        ArrayList<String> reportTypeList = new ArrayList<String>();
        reportTypeList.add("Demographic Report");
        reportTypeList.add("Encounters Report");
        reportTypeList.add("Lab Report");
        reportTypeList.add("Medication Report");
        reportTypeList.add("All Report");
        reportList.setListData(reportTypeList.toArray());
    }
    public void selectReport(String reportType)
    {
        if(reportType == "Demographic Report")
        {
            String medicalRecordNum = "";
            String altRecordNum = "";
            String lastName = "";
            String firstName = "";
            String middleInit = "";
            String streetAddress = "";
            String city = "";
            String state = "";
            String zip = "";
            String gender = "";
            String bday = "";
            int age = 0;
            String homePhone = "";
            String workPhone = "";
            String email = "";
            String nextOfKin = "";
            String nextOfKinInfo = "";
            String notes = "";
            try
            {
                String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                if(rs.next())
                {
                    long medicalRecordNumData = rs.getLong(2);
                    medicalRecordNum = Long.toString(medicalRecordNumData);
                    long altMedicalRecordNumData = rs.getLong(3);
                    altRecordNum = Long.toString(altMedicalRecordNumData);
                    lastName = rs.getString(4);
                    firstName = rs.getString(5);
                    middleInit = rs.getString(6);
                    streetAddress = rs.getString(7);
                    city = rs.getString(8);
                    state = rs.getString(9);
                    int zipData = rs.getInt(10);
                    zip = Integer.toString(zipData);
                    gender = rs.getString(11);
                    bday = rs.getString(12);
                    homePhone = rs.getString(13);
                    workPhone = rs.getString(14);
                    email = rs.getString(15);
                    nextOfKin = rs.getString(16);
                    nextOfKinInfo = rs.getString(17);
                    notes = rs.getString(18);  
                    try
                    {
                        age = calcAge();
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
                
            reportText.setText("Patient Demographics Report" + "\n" + "\n" 
                    + "Patient ID: " + patientID + "\n" + "\n" 
                    + "Medical Record Number: " + medicalRecordNum + "\n" + "\n" 
                    + "Alt Medical Record Number: " + altRecordNum + "\n" + "\n"
                    + "Name: " + firstName + " " + lastName + "\n" + "\n"
                    + "Address: " + streetAddress + "\n" + "\n"
                    + "City: " + city + "\n" + "\n"
                    + "State: " + state + "\n" + "\n"
                    + "Zip: " + zip + "\n" + "\n"
                    + "Gender: " + gender + "\n" + "\n"
                    + "Birth Date: " + bday + "\n" + "\n"
                    + "Age: " + age + "\n" + "\n"
                    + "Homephone: " + homePhone + "\n" + "\n"
                    + "Workphone: " + workPhone + "\n" + "\n"
                    + "Email: " + email + "\n" + "\n"
                    + "Next Of Kin: " + nextOfKin + "\n" + "\n"
                    + "Next Of Kin Contact Info: " + nextOfKinInfo + "\n" + "\n"
                    + "General Notes: " + notes);
            
            }
            catch(ClassNotFoundException | SQLException e)
            {
                
            }
        }
        else if(reportType == "Encounters Report")
        {
            long encounterID = 0;
            String encounterDate = "";
            String encounterType = "";
            String encounterNotes = "";
            String diagnosis = "";
            String healthProvider = "";
            String firstName = "";
            String lastName = "";
            String gender = "";
            ArrayList<String> encounterList = new ArrayList<String>();
            try 
            {
                String query = "SELECT * FROM encounters WHERE PATIENTID ='" 
                    + patientID + "'";
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                String[] reportString;
                    while(rs.next())
                    {
                        //get columns
                        encounterID = rs.getLong("ENCOUNTERID");
                        encounterDate = rs.getString("ENCOUNTERDATE");
                        encounterType = rs.getString("ENCOUNTERTYPE");
                        encounterNotes = rs.getString("ENCOUNTERNOTES");
                        diagnosis = rs.getString("DIAGNOSISDESCRIPTION");
                        healthProvider = rs.getString("HEALTHCAREPROVIDER");
                        reportText.setText("Encounter Report" + "\n" + "\n" 
                        + "Patient ID: " + patientID + "\n" + "Encounter ID: " 
                        + encounterID + "\n" + "Encounter Date: " + encounterDate 
                        + "\n" + "Encounter Type: " + encounterType + "\n" 
                        + "Encounter Notes: " + encounterNotes + "\n" 
                        + "Diagnosis Description: " + diagnosis + "\n" + "Health Care Provider: " + healthProvider);
                    }
                
                
                
            }
            catch(Exception e)         
            {
                e.printStackTrace();
            }
        }
        else if(reportType == "Labs/Procedures Report")
        {
            reportText.setText("Lab Report" + "\n" + "\n" + "Patient Name: " + "\n" + "Encounter ID: " + "\n" + "Encounter Type: ");
        }
        else if(reportType == "Medications Report")
        {
            reportText.setText("Medication Report" + "\n" + "\n" + "Patient Name: " + "\n" + "Encounter ID: " + "\n" + "Encounter Type: ");
        }
        else if(reportType == "All Report")
        {
            reportText.setText("All Reports" + "\n" + "\n" + "Patient Name: " + "\n" + "Encounter ID: " + "\n" + "Encounter Type: ");
        }
    }
    public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
        Calendar now = Calendar.getInstance();
        Calendar dob = Calendar.getInstance();
        try 
        {
            String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                bday = rs.getString("BIRTH_DATE");
                SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
                dob.setTime(sdf.parse(bday));
                int year1 = now.get(Calendar.YEAR);
                int year2 = dob.get(Calendar.YEAR);
                age = year1 - year2;
                int month1 = now.get(Calendar.MONTH);
                int month2 = dob.get(Calendar.MONTH);
                if (month2 > month1) 
                {
                    age--;
                } 
                else if (month1 == month2) 
                {
                    int day1 = now.get(Calendar.DAY_OF_MONTH);
                    int day2 = dob.get(Calendar.DAY_OF_MONTH);
                    if (day2 > day1) 
                    {
                        age--;
                    }
                }
                return age;
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            reportText.setText("Age not found.");
        }
        return age; 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList reportList;
    private javax.swing.JTextPane reportText;
    private javax.swing.JButton reportsEncountersPageButton;
    private javax.swing.JButton reportsLabsPageButton;
    private javax.swing.JButton reportsMedPageButton;
    private javax.swing.JButton reportsPatientPageButton;
    private javax.swing.JButton reportsVitalSignsPageButton;
    // End of variables declaration//GEN-END:variables
}
