/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;


/**
 *
 * @author kgoodwi
 */
public class LabsProcedures extends javax.swing.JFrame {
    private void enableForm(boolean formEnabled)
    {
        if(formEnabled == false)
        {
            addLabButton.setEnabled(true);
            deleteLabButton.setEnabled(true);
            saveLabButton.setEnabled(true);
            cancelLabButton.setEnabled(true);
            
            labsPatientIDTB.setEnabled(true); 
            testTypeBox.setEnabled(true);   
            testDescriptionTB.setEnabled(true);
            testResultsTB.setEnabled(true);
            dateTimeTB.setEnabled(true);
            modifyLabButton.setEnabled(false);
            labPatientDemPageButton.setEnabled(false);
            labsMedPageButton.setEnabled(false);
            labsVitalSignsPageButton.setEnabled(false);
            labsEncountersPageButton.setEnabled(false);
            labReportsPageButton.setEnabled(false);
            labsMedPageButton.setEnabled(false);
            labsPatientIDTB.requestFocusInWindow();
        }
        else
        {
            addLabButton.setEnabled(false);
            deleteLabButton.setEnabled(false);
            saveLabButton.setEnabled(false);
            cancelLabButton.setEnabled(false);
            
            labsPatientIDTB.setEnabled(false); 
            testTypeBox.setEnabled(false);   
            testDescriptionTB.setEnabled(false);
            testResultsTB.setEnabled(false);
            dateTimeTB.setEnabled(false);
            modifyLabButton.setEnabled(true);
            labPatientDemPageButton.setEnabled(true);
            labsMedPageButton.setEnabled(false);
            labsVitalSignsPageButton.setEnabled(true);
            labsEncountersPageButton.setEnabled(true);
            labReportsPageButton.setEnabled(true);
            labsMedPageButton.setEnabled(true);
        }
    }
    boolean formEnabled = true;
    static String patientID = "";
    
    /**
     * Creates new form LabsProcedures
     */
    
    public LabsProcedures() {
        initComponents();
        populateComboBox();
        populateTestType();
        if(!PatientDemographics.getPatientID().isEmpty())
        {
            this.patientID = PatientDemographics.getPatientID();
            labsPatientIDBox.setSelectedItem(patientID);
        }
        else
        {
            this.patientID = labsPatientIDBox.getSelectedItem().toString();
        }
        
        populateAllList();
        setLabs();
        enableForm(formEnabled);
        formEnabled = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        labsNameLabel = new javax.swing.JLabel();
        labsGenderLabel = new javax.swing.JLabel();
        labsAgeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labIDTB = new javax.swing.JTextField();
        labsPatientIDTB = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        testDescriptionTB = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        testResultsTB = new javax.swing.JTextArea();
        dateTimeTB = new javax.swing.JTextField();
        addLabButton = new javax.swing.JButton();
        modifyLabButton = new javax.swing.JButton();
        deleteLabButton = new javax.swing.JButton();
        saveLabButton = new javax.swing.JButton();
        cancelLabButton = new javax.swing.JButton();
        labsMedPageButton = new javax.swing.JButton();
        labsEncountersPageButton = new javax.swing.JButton();
        labPatientDemPageButton = new javax.swing.JButton();
        labReportsPageButton = new javax.swing.JButton();
        labsVitalSignsPageButton = new javax.swing.JButton();
        labsPatientIDBox = new javax.swing.JComboBox();
        testTypeBox = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        labsListBox = new javax.swing.JList();
        labsErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Labs / Procedures");

        labsNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labsNameLabel.setForeground(new java.awt.Color(255, 51, 204));
        labsNameLabel.setText("jLabel2");

        labsGenderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labsGenderLabel.setForeground(new java.awt.Color(255, 51, 204));
        labsGenderLabel.setText("jLabel3");

        labsAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labsAgeLabel.setForeground(new java.awt.Color(255, 51, 204));
        labsAgeLabel.setText("jLabel4");

        jLabel2.setText("Lab ID :");

        jLabel3.setText("Patient ID :");

        jLabel4.setText("Patient ID:");

        jLabel5.setText("Test Type :");

        jLabel6.setText("Test Description :");

        jLabel7.setText("Test Results :");

        jLabel8.setText("Test Date / Time :");

        jLabel9.setText("All Labs :");

        labIDTB.setEnabled(false);

        labsPatientIDTB.setNextFocusableComponent(testTypeBox);
        labsPatientIDTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labsPatientIDTBActionPerformed(evt);
            }
        });

        testDescriptionTB.setColumns(20);
        testDescriptionTB.setRows(5);
        testDescriptionTB.setNextFocusableComponent(testResultsTB);
        jScrollPane1.setViewportView(testDescriptionTB);

        testResultsTB.setColumns(20);
        testResultsTB.setRows(5);
        testResultsTB.setNextFocusableComponent(dateTimeTB);
        jScrollPane2.setViewportView(testResultsTB);

        dateTimeTB.setNextFocusableComponent(labsPatientIDTB);

        addLabButton.setText("Add Record");
        addLabButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addLabButtonMouseClicked(evt);
            }
        });

        modifyLabButton.setText("Modify");
        modifyLabButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modifyLabButtonItemStateChanged(evt);
            }
        });
        modifyLabButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modifyLabButtonMouseClicked(evt);
            }
        });

        deleteLabButton.setText("Delete");
        deleteLabButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteLabButtonMouseClicked(evt);
            }
        });

        saveLabButton.setText("Save");
        saveLabButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveLabButtonMouseClicked(evt);
            }
        });

        cancelLabButton.setText("Cancel");
        cancelLabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLabButtonActionPerformed(evt);
            }
        });

        labsMedPageButton.setText("Go To Medications");
        labsMedPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labsMedPageButtonMouseClicked(evt);
            }
        });

        labsEncountersPageButton.setText("Go To Encounters");
        labsEncountersPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labsEncountersPageButtonMouseClicked(evt);
            }
        });

        labPatientDemPageButton.setText("Go To Patient Demographics");
        labPatientDemPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labPatientDemPageButtonMouseClicked(evt);
            }
        });

        labReportsPageButton.setText("Go To Reports");
        labReportsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labReportsPageButtonMouseClicked(evt);
            }
        });

        labsVitalSignsPageButton.setText("Go To Vital Signs");
        labsVitalSignsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labsVitalSignsPageButtonMouseClicked(evt);
            }
        });

        labsPatientIDBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        labsPatientIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                labsPatientIDBoxItemStateChanged(evt);
            }
        });

        testTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        testTypeBox.setNextFocusableComponent(testDescriptionTB);

        labsListBox.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        labsListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                labsListBoxValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(labsListBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1)
                                        .addComponent(jScrollPane2)
                                        .addComponent(testTypeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(4, 4, 4)
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dateTimeTB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(10, 10, 10)
                                        .addComponent(labsPatientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(labsErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(10, 10, 10)
                                        .addComponent(labIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(labsVitalSignsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labReportsPageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labPatientDemPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(labsEncountersPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4)
                                    .addComponent(modifyLabButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addLabButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteLabButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cancelLabButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveLabButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labsMedPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labsPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labsNameLabel)
                        .addGap(186, 186, 186)
                        .addComponent(labsGenderLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(labsAgeLabel)
                .addGap(135, 135, 135))
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labsNameLabel)
                    .addComponent(labsGenderLabel)
                    .addComponent(labsAgeLabel))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(labsPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modifyLabButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addLabButton)
                        .addGap(11, 11, 11)
                        .addComponent(deleteLabButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveLabButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelLabButton)
                        .addGap(11, 11, 11)
                        .addComponent(labsMedPageButton)
                        .addGap(11, 11, 11)
                        .addComponent(labsEncountersPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labPatientDemPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labReportsPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labsVitalSignsPageButton)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(labsPatientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(labIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(testTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(dateTimeTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labsErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelLabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelLabButtonActionPerformed
        formEnabled = true;
        enableForm(formEnabled);
        formEnabled = false;
    }//GEN-LAST:event_cancelLabButtonActionPerformed

    private void labsMedPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labsMedPageButtonMouseClicked
        this.setVisible(false);
        new Medications().setVisible(true);
    }//GEN-LAST:event_labsMedPageButtonMouseClicked

    private void labsEncountersPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labsEncountersPageButtonMouseClicked
        this.setVisible(false);
        new Encounters().setVisible(true);
    }//GEN-LAST:event_labsEncountersPageButtonMouseClicked

    private void labPatientDemPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labPatientDemPageButtonMouseClicked
        this.setVisible(false);
        new PatientDemographics().setVisible(true);
    }//GEN-LAST:event_labPatientDemPageButtonMouseClicked

    private void labReportsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labReportsPageButtonMouseClicked
        this.setVisible(false);
        new Reports().setVisible(true);
    }//GEN-LAST:event_labReportsPageButtonMouseClicked

    private void labsVitalSignsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labsVitalSignsPageButtonMouseClicked
        this.setVisible(false);
        new VitalSigns().setVisible(true);
    }//GEN-LAST:event_labsVitalSignsPageButtonMouseClicked

    private void modifyLabButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modifyLabButtonItemStateChanged
        
    }//GEN-LAST:event_modifyLabButtonItemStateChanged

    private void modifyLabButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modifyLabButtonMouseClicked
        formEnabled = false;
        enableForm(formEnabled);
        formEnabled = true;
    }//GEN-LAST:event_modifyLabButtonMouseClicked

    private void labsPatientIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_labsPatientIDBoxItemStateChanged
        if(labsPatientIDBox.getItemCount() > 0)
        {
            this.patientID = labsPatientIDBox.getSelectedItem().toString();
        }
        
        PatientDemographics.setPatientID(patientID);
        labsPatientIDTB.setText(patientID);
        labsListBox.removeAll();
        populateAllList();
        setLabs();
    }//GEN-LAST:event_labsPatientIDBoxItemStateChanged

    private void labsListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_labsListBoxValueChanged
        String labSelect = labsListBox.getSelectedValue().toString();
        String[] parts = labSelect.split(" --- ");
        String labID = parts[0];
        labSelect(labID);
    }//GEN-LAST:event_labsListBoxValueChanged

    private void labsPatientIDTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labsPatientIDTBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labsPatientIDTBActionPerformed

    private void addLabButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLabButtonMouseClicked
        String newPatientID = labsPatientIDTB.getText();
        String testType = "";
        String testDescription = "";
        String testResults = "";
        String testDateTime = "";
        if(isNumeric(newPatientID) 
                && newPatientID.length() == 4 
                && testDescriptionTB.getText().length() <= 255
                && testDescriptionTB.getText().length() >= 1
                && testResultsTB.getText().length() <= 255
                && testResultsTB.getText().length() >= 1
                && dateTimeTB.getText().length() <= 20
                && dateTimeTB.getText().length() >= 8)
        {
            try 
            {
                testType = testTypeBox.getSelectedItem().toString();
                testDescription = testDescriptionTB.getText();
                testResults = testResultsTB.getText();
                testDateTime = dateTimeTB.getText();
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                String query = "SELECT PATIENTID FROM labs WHERE PATIENTID ='" 
                        + newPatientID + "' AND TESTTYPE ='" 
                        + testType + "' AND TESTDESCRIPTION ='" 
                        + testDescription + "' AND TESTRESULTS ='" 
                        + testResults + "' AND DATENTIME ='" 
                        + testDateTime + "'";
                ResultSet rs = stmt.executeQuery(query);
                //if exists
                if(rs.isBeforeFirst())
                {
                  labsErrorLabel.setText("Lab already exists.");
                }
                else
                {
                    if(addLab(newPatientID, testType, testDescription, 
                            testResults, testDateTime))
                    {
                        stmt.close();
                        con.close();    
                        labsPatientIDBox.removeAllItems();
                        populateComboBox();
                        this.patientID = newPatientID;
                        populateTestType();
                        populateAllList();
                        setLabs();
                        formEnabled = true;
                        enableForm(formEnabled);
                        formEnabled = false;
                        labsErrorLabel.setText("Lab Created.");
                    }
                    else
                    {
                        stmt.close();
                        con.close();
                        labsErrorLabel.setText("Unable to add lab "
                            + "to database.");
                    }
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                e.printStackTrace();
                labsErrorLabel.setText(e.toString());
            }
        }
        else
        {
            labsErrorLabel.setText("Please correctly "
                    + "enter the fields provided.");
        }
        
    }//GEN-LAST:event_addLabButtonMouseClicked

    private void deleteLabButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteLabButtonMouseClicked
        labsErrorLabel.setText("");
        Long labID = Long.parseLong(labIDTB.getText());
        Connection con = null;
        Statement stmt = null;
        try 
        {
            String query = "DELETE FROM labs WHERE LABID ='" 
                    + labID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(dbUrl, "root", "root");
            stmt = con.createStatement();
            stmt.execute(query);
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //not found or couldnt connect
            e.printStackTrace();
            labsErrorLabel.setText("Problem deleting record from database.");
        }  
        finally
        {
            try
            {
                stmt.close();
                con.close();
                labsListBox.removeAll();
                populateAllList();
                if(labsListBox.isSelectionEmpty())
                {
                    setLabs();
                }
                else
                {
                    labSelect(patientID);
                }
                
                
                labsErrorLabel.setText("Lab Successfully Deleted.");
            }
            catch (Exception e) 
            {
                //Problem closing statement or connection
                e.printStackTrace();
            }
        }        
    }//GEN-LAST:event_deleteLabButtonMouseClicked

    private void saveLabButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveLabButtonMouseClicked
        Long patientIDNum;
        Long labID;
        String testType = "";
        String testDescription = "";
        String testResults = "";
        String testDateTime = "";
        
        if(isNumeric(labsPatientIDTB.getText()) 
                && labsPatientIDTB.getText().length() == 4 
                && testDescriptionTB.getText().length() <= 255 
                && testDescriptionTB.getText().length() >= 1
                && testResultsTB.getText().length() <= 255
                && testResultsTB.getText().length() >= 1
                && dateTimeTB.getText().length() <= 19
                || dateTimeTB.getText().length() > 8)
        {
            patientIDNum = Long.parseLong(labsPatientIDTB.getText());
            labID = Long.parseLong(labIDTB.getText());
            testType = testTypeBox.getSelectedItem().toString();
            testDescription = testDescriptionTB.getText();
            testResults = testResultsTB.getText();
            testDateTime = dateTimeTB.getText();
            
            try
            {
                String query = "SELECT PATIENTID FROM patients WHERE PATIENTID ='" + patientIDNum + "'";
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query); 
                if(rs.isBeforeFirst())
                {
                    if(updateLab(patientIDNum, labID, testType, 
                    testDescription, testResults, testDateTime))
                    {
                        labsPatientIDBox.removeAllItems();
                        populateComboBox();
                        this.patientID = patientIDNum.toString();
                        labsPatientIDBox.setSelectedItem(patientID);
                        populateTestType();
                        populateAllList();
                        setLabs();
                        formEnabled = true;
                        enableForm(formEnabled);
                        formEnabled = false;
                        labsErrorLabel.setText("Lab Updated.");
                    }
                    else
                    {
                        labsErrorLabel.setText("Unable to update lab.");                    
                    }
                }
                else
                {
                    labsErrorLabel.setText("Patient does not exist."); 
                }
            }
            catch(Exception e)
            {
                labsErrorLabel.setText("Error retrieving record set."); 
            }
                
        }
        else
        {
            labsErrorLabel.setText("Please correctly enter all fields."); 
        }
    }//GEN-LAST:event_saveLabButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabsProcedures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabsProcedures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabsProcedures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabsProcedures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabsProcedures().setVisible(true);
            }
        });
    }
    public void populateComboBox()
    {      
        labsErrorLabel.setText("");
        ArrayList<String> patients = new ArrayList<String>();
        
        try
        {
            String query = "SELECT PATIENTID FROM patients";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            while(rs.next())
            {
                String id = rs.getString("PATIENTID");
                patients.add(id);
            }
            DefaultComboBoxModel list = new DefaultComboBoxModel(patients.toArray());
            labsPatientIDBox.setModel(list);
            this.patientID = labsPatientIDBox.getSelectedItem().toString();
            labsPatientIDBox.setSelectedItem(patientID); 
            labsPatientIDTB.setText(patientID);
            
            con.close();
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connnecting or querying
            labsErrorLabel.setText("Error populating patient ID selection box.");
            e.printStackTrace();
        }
    }
    public void populateAllList()
    {
        labsErrorLabel.setText("");
        ArrayList<String> allLabsList = new ArrayList<String>();
        String labIDString = "";
        Long labID;
        String date = "";
        String type = "";
        try
        {
            String query = "SELECT * FROM labs WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next())
            {
                labID = rs.getLong(2);
                labIDString = Long.toString(labID);
                type = rs.getString(3);
                date = rs.getString(6);
                allLabsList.add(labID + " --- " + date + " --- " + type);
            }
            labsListBox.setListData(allLabsList.toArray());
            con.close();
            
        }
        catch(Exception e)
        {
            labsErrorLabel.setText("Error populating lab list.");
        }
        
    }
    public void populateTestType()
    {
        labsErrorLabel.setText("");
        String testType = "";
        ArrayList<String> testTypeList = new ArrayList<String>();
        
        testTypeList.add("Autopsy");
        testTypeList.add("Biopsy");
        testTypeList.add("CBC");
        testTypeList.add("CT Scan");
        testTypeList.add("Cholesterol");
        testTypeList.add("EKG");
        testTypeList.add("Endoscopy");
        testTypeList.add("EEG");
        testTypeList.add("Imaging");
        testTypeList.add("Lumbar Puncture");
        testTypeList.add("Lobotomy");
        testTypeList.add("MRI");
        testTypeList.add("Urinalysis");
        testTypeList.add("Vasectomy");
        testTypeList.add("X-Ray");
        
        DefaultComboBoxModel list = new DefaultComboBoxModel(testTypeList.toArray());
        testTypeBox.setModel(list);
    }
    public void setLabs()
    {
        labsErrorLabel.setText("");
        Long labID;
        String labIDString = "";
        String testType = "";
        
        String testDescription = "";
        String testResults = "";
        String testDate = "";
        
        String firstName = "";
        String lastName = "";
        String gender = "";
        labIDTB.setText("");
        
        testDescriptionTB.setText("");
        testResultsTB.setText("");
        dateTimeTB.setText("");
        labsListBox.removeAll();
        
        try 
        {
            String query = "SELECT * FROM labs WHERE PATIENTID ='" 
                + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    //get columns
                    labID = rs.getLong(2);
                    testType = rs.getString(3);
                    testDescription = rs.getString(4);
                    testResults = rs.getString(5);
                    testDate = rs.getString(6);
                    
                    //set text 
                    labIDString = Long.toString(labID);
                    labIDTB.setText(labIDString);
                    testTypeBox.setSelectedItem(testType);
                    testDescriptionTB.setText(testDescription);
                    testResultsTB.setText(testResults);
                    dateTimeTB.setText(testDate);
                }   
                con.close();
            }
            else
            {
                con.close();
                labIDTB.setText("");
                testDescriptionTB.setText("");
                testResultsTB.setText("");
                dateTimeTB.setText("");
                labsListBox.removeAll();
                labsErrorLabel.setText("Lab not found or holds no data.");
            }
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            labsErrorLabel.setText("error displaying lab info");
        }   
        try
        {
            String age = "";
            String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query); 
            if(rs.next())
            {
                lastName = rs.getString("LASTNAME");
                firstName = rs.getString("FIRSTNAME");
                gender = rs.getString("GENDER");
                try
                {
                    int bdayNum = calcAge();
                    age = Integer.toString(bdayNum);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                    labsNameLabel.setText(firstName + " " + lastName);
                    labsGenderLabel.setText(gender);
                    labsAgeLabel.setText(age);     
                }
            else
            {
                con.close();
                labsErrorLabel.setText("Error finding patient info for "
                    + "header.");   
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            labsErrorLabel.setText("Error Connecting to Database.");
        }
    }
    public void labSelect(String labID)
    {
        labsErrorLabel.setText("");
        String testType = "";
        
        String testDescription = "";
        String testResults = "";
        String testDate = "";
        
        String firstName = "";
        String lastName = "";
        String gender = "";
        labIDTB.setText("");
        
        testDescriptionTB.setText("");
        testResultsTB.setText("");
        dateTimeTB.setText("");
        try 
        {
            String query = "SELECT * FROM labs WHERE PATIENTID ='" 
                + patientID + "' AND LABID ='" + labID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    //get columns
                    
                    testType = rs.getString(3);
                    testDescription = rs.getString(4);
                    testResults = rs.getString(5);
                    testDate = rs.getString(6);
                    
                    //set text 
                    
                    labIDTB.setText(labID);
                    testTypeBox.setSelectedItem(testType);
                    testDescriptionTB.setText(testDescription);
                    testResultsTB.setText(testResults);
                    dateTimeTB.setText(testDate);
                } 
                con.close();
            }
            else
            {
                con.close();
                
                testDescriptionTB.setText("");
                testResultsTB.setText("");
                dateTimeTB.setText("");
                labsErrorLabel.setText("Lab not found or holds no data.");
            }
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            labsErrorLabel.setText("error displaying lab info");
        }       
    }
    public boolean addLab(String patientID, String testType, 
            String testDescription, String testResults, String testDateTime)
    {
        boolean result = false;
        long patientIDNum = Long.parseLong(patientID);

        try
        {
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("INSERT INTO labs"
                    + " (PATIENTID, TESTTYPE, TESTDESCRIPTION, TESTRESULTS, "
                    + "DATENTIME) VALUES "
                    + "(?, ?, ?, ?, ?)");
            stmt.setLong(1, patientIDNum);
            stmt.setString(2, testType);
            stmt.setString(3, testDescription);
            stmt.setString(4, testResults);
            stmt.setString(5, testDateTime);
            int rowcount = stmt.executeUpdate();
            result = rowcount == 1;
            stmt.close();
            con.close();            
        }
        catch(ClassNotFoundException | SQLException e) 
        { 
            labsErrorLabel.setText("Lab could not be created.");
            result = false;
        }
        return result;
    }
    public boolean updateLab(Long patientID, Long labID, String testType, 
            String testDescription, String testResults, String dateTime)
    {
        boolean result = false;
        try
        {
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("UPDATE labs"
                    + " SET PATIENTID = ?, TESTTYPE = ?, TESTDESCRIPTION = ?, TESTRESULTS = ?, "
                    + "DATENTIME = ? WHERE LABID ='" + labID + "'");
            stmt.setLong(1, patientID);
            stmt.setString(2, testType);
            stmt.setString(3, testDescription);
            stmt.setString(4, testResults);
            stmt.setString(5, dateTime);
            int rowcount = stmt.executeUpdate();
            result = rowcount > 0;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            labsErrorLabel.setText("");
            result = false;
        }
        return result;
    }
    public static boolean isNumeric(String str)  
    {  
        try  
        {  
            Long.parseLong(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
        Calendar now = Calendar.getInstance();
        Calendar dob = Calendar.getInstance();
        try 
        {
            String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                bday = rs.getString("BIRTH_DATE");
                SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
                dob.setTime(sdf.parse(bday));
                int year1 = now.get(Calendar.YEAR);
                int year2 = dob.get(Calendar.YEAR);
                age = year1 - year2;
                int month1 = now.get(Calendar.MONTH);
                int month2 = dob.get(Calendar.MONTH);
                if (month2 > month1) 
                {
                    age--;
                } 
                else if (month1 == month2) 
                {
                    int day1 = now.get(Calendar.DAY_OF_MONTH);
                    int day2 = dob.get(Calendar.DAY_OF_MONTH);
                    if (day2 > day1) 
                    {
                        age--;
                    }
                }
                return age;
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            labsErrorLabel.setText("Age not found.");
        }
        return age; 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLabButton;
    private javax.swing.JButton cancelLabButton;
    private javax.swing.JTextField dateTimeTB;
    private javax.swing.JButton deleteLabButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField labIDTB;
    private javax.swing.JButton labPatientDemPageButton;
    private javax.swing.JButton labReportsPageButton;
    private javax.swing.JLabel labsAgeLabel;
    private javax.swing.JButton labsEncountersPageButton;
    private javax.swing.JLabel labsErrorLabel;
    private javax.swing.JLabel labsGenderLabel;
    private javax.swing.JList labsListBox;
    private javax.swing.JButton labsMedPageButton;
    private javax.swing.JLabel labsNameLabel;
    private javax.swing.JComboBox labsPatientIDBox;
    private javax.swing.JTextField labsPatientIDTB;
    private javax.swing.JButton labsVitalSignsPageButton;
    private javax.swing.JButton modifyLabButton;
    private javax.swing.JButton saveLabButton;
    private javax.swing.JTextArea testDescriptionTB;
    private javax.swing.JTextArea testResultsTB;
    private javax.swing.JComboBox testTypeBox;
    // End of variables declaration//GEN-END:variables
}