/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//new 
package patientdb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author kgoodwi
 */
public class Encounters extends javax.swing.JFrame {
    private void enableForm(boolean formEnabled)
    {
        if(formEnabled == false)
        {
            encountersAddRecordButton.setEnabled(true);
            encountersDeleteButton.setEnabled(true);
            encountersSaveButton.setEnabled(true);
            encountersCancelButton.setEnabled(true);
            encountersPatientIDTB.setEnabled(true);
            encounterTypeBox.setEnabled(true); 
            encounterDateTB.setEnabled(true);   
            encounterNotesTB.setEnabled(true);
            diagnosisTB.setEnabled(true);
            encounterHealthcareProvTB.setEnabled(true);
            encountersModifyButton.setEnabled(false);
            encountersPatientDemPageButton.setEnabled(false);
            encountersMedPageButton.setEnabled(false);
            encountersVitalSignsPageButton.setEnabled(false);
            encountersReportsPageButton.setEnabled(false);
            encountersLabsPageButton.setEnabled(false);
            encountersPatientIDTB.requestFocusInWindow();
        }
        else
        {
            encountersPatientIDTB.setEnabled(false);
            encountersAddRecordButton.setEnabled(false);
            encountersDeleteButton.setEnabled(false);
            encountersSaveButton.setEnabled(false);
            encountersCancelButton.setEnabled(false);
            encounterTypeBox.setEnabled(false);
            encountersModifyButton.setEnabled(true);
            encounterDateTB.setEnabled(false);
            encounterNotesTB.setEnabled(false);
            diagnosisTB.setEnabled(false);
            encounterHealthcareProvTB.setEnabled(false);
            encountersPatientDemPageButton.setEnabled(true);
            encountersMedPageButton.setEnabled(true);
            encountersVitalSignsPageButton.setEnabled(true);
            encountersReportsPageButton.setEnabled(true);
            encountersLabsPageButton.setEnabled(true);
        }
    }
    boolean formEnabled = true;
    static String patientID = "";
    /**
     * Creates new form Encounters
     */
    public Encounters() {
        initComponents();
        populateEncounterType();
        populateComboBox();
        if(!PatientDemographics.getPatientID().isEmpty())
        {
            this.patientID = PatientDemographics.getPatientID();
            encountersPatientIDBox.setSelectedItem(patientID);
        }
        else
        {
            this.patientID = encountersPatientIDBox.getSelectedItem().toString();
        }
        populateEncounter();
        
        
        enableForm(formEnabled);
        formEnabled = false;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        encountersNameLabel = new javax.swing.JLabel();
        encountersGenderLabel = new javax.swing.JLabel();
        encountersAgeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        encounterDateTB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        encounterIDBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        encounterDescrTextArea = new javax.swing.JScrollPane();
        encounterNotesTB = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        encounterDiagDescrTextArea = new javax.swing.JScrollPane();
        diagnosisTB = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        encounterHealthcareProvTB = new javax.swing.JTextField();
        encountersAddRecordButton = new javax.swing.JButton();
        encountersModifyButton = new javax.swing.JButton();
        encountersDeleteButton = new javax.swing.JButton();
        encountersSaveButton = new javax.swing.JButton();
        encountersCancelButton = new javax.swing.JButton();
        encountersPatientDemPageButton = new javax.swing.JButton();
        encountersMedPageButton = new javax.swing.JButton();
        encountersVitalSignsPageButton = new javax.swing.JButton();
        encountersReportsPageButton = new javax.swing.JButton();
        encountersLabsPageButton = new javax.swing.JButton();
        encountersPatientIDBox = new javax.swing.JComboBox();
        encountersErrorLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        encounterIDTB = new javax.swing.JTextField();
        encountersPatientIDTB = new javax.swing.JTextField();
        encounterTypeBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Encounters");

        encountersNameLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        encountersNameLabel.setForeground(new java.awt.Color(255, 0, 204));
        encountersNameLabel.setText("jLabel2");

        encountersGenderLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        encountersGenderLabel.setForeground(new java.awt.Color(255, 0, 204));
        encountersGenderLabel.setText("jLabel3");

        encountersAgeLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        encountersAgeLabel.setForeground(new java.awt.Color(255, 0, 204));
        encountersAgeLabel.setText("jLabel4");

        jLabel2.setText("Encounter ID :");

        jLabel3.setText("Patient ID :");

        jLabel4.setText("Encounter Date :");

        encounterDateTB.setEnabled(false);
        encounterDateTB.setNextFocusableComponent(encounterTypeBox);

        jLabel5.setText("Encounter Type :");

        encounterIDBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        encounterIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                encounterIDBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("Encounter Description/Notes :");

        encounterNotesTB.setColumns(20);
        encounterNotesTB.setRows(5);
        encounterNotesTB.setEnabled(false);
        encounterNotesTB.setNextFocusableComponent(diagnosisTB);
        encounterDescrTextArea.setViewportView(encounterNotesTB);

        jLabel7.setText("Diagnosis Description :");

        diagnosisTB.setColumns(20);
        diagnosisTB.setRows(5);
        diagnosisTB.setEnabled(false);
        diagnosisTB.setNextFocusableComponent(encounterHealthcareProvTB);
        encounterDiagDescrTextArea.setViewportView(diagnosisTB);

        jLabel8.setText("Encounter Healthcare Provider :");

        encounterHealthcareProvTB.setNextFocusableComponent(encountersPatientIDTB);

        encountersAddRecordButton.setText("Add Record");
        encountersAddRecordButton.setEnabled(false);
        encountersAddRecordButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersAddRecordButtonMouseClicked(evt);
            }
        });

        encountersModifyButton.setText("Modify");
        encountersModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersModifyButtonMouseClicked(evt);
            }
        });

        encountersDeleteButton.setText("Delete");
        encountersDeleteButton.setEnabled(false);
        encountersDeleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersDeleteButtonMouseClicked(evt);
            }
        });

        encountersSaveButton.setText("Save");
        encountersSaveButton.setEnabled(false);
        encountersSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersSaveButtonMouseClicked(evt);
            }
        });

        encountersCancelButton.setText("Cancel");
        encountersCancelButton.setEnabled(false);
        encountersCancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersCancelButtonMouseClicked(evt);
            }
        });

        encountersPatientDemPageButton.setText("Go To Patients");
        encountersPatientDemPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersPatientDemPageButtonMouseClicked(evt);
            }
        });

        encountersMedPageButton.setText("Go To Medications");
        encountersMedPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersMedPageButtonMouseClicked(evt);
            }
        });

        encountersVitalSignsPageButton.setText("Go To Vital Signs");
        encountersVitalSignsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersVitalSignsPageButtonMouseClicked(evt);
            }
        });

        encountersReportsPageButton.setText("Go To Reports");
        encountersReportsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersReportsPageButtonMouseClicked(evt);
            }
        });

        encountersLabsPageButton.setText("Go To Labs");
        encountersLabsPageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersLabsPageButtonMouseClicked(evt);
            }
        });

        encountersPatientIDBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        encountersPatientIDBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                encountersPatientIDBoxItemStateChanged(evt);
            }
        });

        jLabel9.setText("Patient ID :");

        jLabel10.setText("Encounter ID :");

        encounterIDTB.setEnabled(false);

        encountersPatientIDTB.setEnabled(false);
        encountersPatientIDTB.setNextFocusableComponent(encounterDateTB);

        encounterTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        encounterTypeBox.setNextFocusableComponent(encounterDescrTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(encountersNameLabel))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(encounterDateTB)
                                    .addComponent(encounterIDTB, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(encountersPatientIDTB, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(encounterTypeBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(30, 30, 30)
                                .addComponent(encountersGenderLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(encountersErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(encounterDescrTextArea)
                                        .addComponent(encounterDiagDescrTextArea)
                                        .addComponent(encounterHealthcareProvTB, javax.swing.GroupLayout.Alignment.TRAILING)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(encountersAgeLabel)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(encountersPatientDemPageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(encountersMedPageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(encountersVitalSignsPageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(encountersReportsPageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(encountersLabsPageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(encountersCancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersSaveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersDeleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersAddRecordButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersPatientIDBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encountersModifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(encounterIDBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(50, 50, 50))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jLabel1)
                        .addGap(211, 211, 211))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encountersNameLabel)
                    .addComponent(encountersGenderLabel)
                    .addComponent(encountersAgeLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(encountersPatientIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(encounterIDTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encounterDateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(encounterTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(encounterDescrTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(encounterDiagDescrTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encounterHealthcareProvTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addComponent(encountersErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encountersPatientIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encounterIDBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersModifyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersAddRecordButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(encountersDeleteButton)
                        .addGap(8, 8, 8)
                        .addComponent(encountersSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersPatientDemPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersMedPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersVitalSignsPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersReportsPageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encountersLabsPageButton)))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encountersModifyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersModifyButtonMouseClicked
        encountersErrorLabel.setText("");
        formEnabled = false;
        enableForm(formEnabled);
        formEnabled = true;
    }//GEN-LAST:event_encountersModifyButtonMouseClicked

    private void encountersPatientDemPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersPatientDemPageButtonMouseClicked
        this.setVisible(false);
        new PatientDemographics().setVisible(true);
    }//GEN-LAST:event_encountersPatientDemPageButtonMouseClicked

    private void encountersMedPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersMedPageButtonMouseClicked
        this.setVisible(false);
        new Medications().setVisible(true);
    }//GEN-LAST:event_encountersMedPageButtonMouseClicked

    private void encountersVitalSignsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersVitalSignsPageButtonMouseClicked
        this.setVisible(false);
        new VitalSigns().setVisible(true);
    }//GEN-LAST:event_encountersVitalSignsPageButtonMouseClicked

    private void encountersReportsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersReportsPageButtonMouseClicked
        this.setVisible(false);
        new Reports().setVisible(true);
    }//GEN-LAST:event_encountersReportsPageButtonMouseClicked

    private void encountersLabsPageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersLabsPageButtonMouseClicked
        this.setVisible(false);
        new LabsProcedures().setVisible(true);
    }//GEN-LAST:event_encountersLabsPageButtonMouseClicked

    private void encountersCancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersCancelButtonMouseClicked
        encountersErrorLabel.setText("");
        formEnabled = true;
        enableForm(formEnabled);
        formEnabled = false;
    }//GEN-LAST:event_encountersCancelButtonMouseClicked

    private void encountersPatientIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_encountersPatientIDBoxItemStateChanged
        if(encountersPatientIDBox.getItemCount() > 0)
        {
            this.patientID = encountersPatientIDBox.getSelectedItem().toString();
        }
        PatientDemographics.setPatientID(patientID);
        encounterIDBox.removeAllItems();
        populateEncounter();
    }//GEN-LAST:event_encountersPatientIDBoxItemStateChanged

    private void encountersAddRecordButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersAddRecordButtonMouseClicked
        String newPatientID = encountersPatientIDTB.getText();
        String encounterDate = "";
        String encounterType = "";
        String encounterNotes = "";
        String diagnosis = "";
        String healthProvider = "";
        if(isNumeric(newPatientID) && newPatientID.length() == 4 
                && isNumeric(encounterIDTB.getText()) 
                && (encounterIDTB.getText().length() == 10) 
                && encounterDateTB.getText().length() <= 10
                && encounterNotesTB.getText().length() <= 255
                || encounterNotesTB.getText().length() > 2
                && diagnosisTB.getText().length() <= 255 
                || diagnosisTB.getText().length() > 2
                && encounterHealthcareProvTB.getText().length() <= 255 
                || encounterHealthcareProvTB.getText().length() > 2)
        {
            try 
            {
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = 
                        DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                String query = "SELECT ENCOUNTERID FROM encounters WHERE PATIENTID ='" 
                        + newPatientID + "' AND ENCOUNTERDATE ='" 
                        + encounterDateTB.getText() + "' AND DIAGNOSISDESCRIPTION ='" + diagnosisTB.getText() + "'";
                ResultSet rs = stmt.executeQuery(query);
                //if exists
                if(rs.isBeforeFirst())
                {
                  encountersErrorLabel.setText("Encounter already exists.");
                }
                else
                {
                    
                    encounterDate = encounterDateTB.getText();
                    encounterType = encounterTypeBox.getSelectedItem().toString();
                    encounterNotes = encounterNotesTB.getText();
                    diagnosis = diagnosisTB.getText();
                    healthProvider = encounterHealthcareProvTB.getText();
                    if(addEncounter(newPatientID, encounterDate, encounterType, 
                            encounterNotes, diagnosis, healthProvider))
                    {
                        stmt.close();
                        con.close();                                               
                        populateComboBox();
                        this.patientID = newPatientID;
                        populateEncounter();
                        encountersErrorLabel.setText("Encounter Created.");
                    }
                    else
                    {
                        stmt.close();
                        con.close();
                        encountersErrorLabel.setText("Unable to add encounter "
                            + "to database.");
                    }
                }
            }
            catch(ClassNotFoundException | SQLException e) 
            {
                e.printStackTrace();
                encountersErrorLabel.setText(e.toString());
            }
        }
        else
        {
            encountersErrorLabel.setText("Please correctly "
                    + "enter the fields provided.");
        }
        
                                
    }//GEN-LAST:event_encountersAddRecordButtonMouseClicked

    private void encounterIDBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_encounterIDBoxItemStateChanged
        setEncounter();  
    }//GEN-LAST:event_encounterIDBoxItemStateChanged

    private void encountersDeleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersDeleteButtonMouseClicked
        encountersErrorLabel.setText("");
        Connection con = null;
        Statement stmt = null;
        try 
        {
            String query = "DELETE FROM encounters WHERE ENCOUNTERID ='" 
                    + encounterIDBox.getSelectedItem() + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(dbUrl, "root", "root");
            stmt = con.createStatement();
            stmt.execute(query);
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //not found or couldnt connect
            e.printStackTrace();
            encountersErrorLabel.setText("Problem deleting record from database.");
        }  
        finally
        {
            try
            {
                stmt.close();
                con.close();
                encountersPatientIDBox.removeAllItems();
                populateComboBox();
                encountersPatientIDBox.setSelectedIndex(0);
                this.patientID = encountersPatientIDBox.getSelectedItem().toString();
                encounterIDBox.removeAllItems();
                populateEncounter();
                encountersErrorLabel.setText("Encounter Successfully Deleted.");
            }
            catch (Exception e) 
            {
                //Problem closing statement or connection
                e.printStackTrace();
            }
        }        
    }//GEN-LAST:event_encountersDeleteButtonMouseClicked

    private void encountersSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersSaveButtonMouseClicked
        String patientIDString = "";
        String encounterDate = "";
        String encounterType = "";
        String encounterNotes = "";
        String diagnosis = "";
        String healthProvider = "";
        if(isNumeric(encountersPatientIDTB.getText()) && encountersPatientIDTB.getText().length() == 4 
                && isNumeric(encounterIDTB.getText()) 
                && (encounterIDTB.getText().length() == 10) 
                && encounterDateTB.getText().length() <= 10
                && encounterNotesTB.getText().length() <= 255
                || encounterNotesTB.getText().length() > 2
                && diagnosisTB.getText().length() <= 255 
                || diagnosisTB.getText().length() > 2
                && encounterHealthcareProvTB.getText().length() <= 255 
                || encounterHealthcareProvTB.getText().length() > 2)
        {
            patientIDString = encountersPatientIDTB.getText();
            String encounterID = encounterIDBox.getSelectedItem().toString();
            encounterDate = encounterDateTB.getText();
            encounterType = encounterTypeBox.getSelectedItem().toString();
            encounterNotes = encounterNotesTB.getText();
            diagnosis = diagnosisTB.getText();
            healthProvider = encounterHealthcareProvTB.getText();
            try
            {
                String query = "SELECT PATIENTID FROM patients WHERE PATIENTID ='" + patientIDString + "'";
                String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection(dbUrl, "root", "root");
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query); 
                if(rs.isBeforeFirst())
                {
                    if(updateEncounter(patientIDString, encounterID, encounterDate, 
                    encounterType, encounterNotes, diagnosis, healthProvider))
                    {
                        encountersPatientIDBox.removeAllItems();
                        populateComboBox();
                        encounterIDBox.removeAllItems();
                        populateEncounter();
                        encountersPatientIDBox.setSelectedItem(patientIDString);
                        encountersErrorLabel.setText("Encounter Updated.");
                    }
                    else
                    {
                        encountersErrorLabel.setText("Unable to update encounter.");                    
                    }
                }
                else
                {
                    encountersErrorLabel.setText("Patient does not exist."); 
                }
            }
            catch(Exception e)
            {
                encountersErrorLabel.setText("Error retrieving record set."); 
            }
                
        }
        else
        {
            encountersErrorLabel.setText("Please correctly enter all fields."); 
        }
    }//GEN-LAST:event_encountersSaveButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encounters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encounters().setVisible(true);
            }
        });
    }
    public void populateComboBox()
    {      
        encountersErrorLabel.setText("");
        ArrayList<String> patients = new ArrayList<String>();
        
        try
        {
            String query = "SELECT PATIENTID FROM patients";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            while(rs.next())
            {
                String id = rs.getString("PATIENTID");
                patients.add(id);
            }
            DefaultComboBoxModel list = new DefaultComboBoxModel(patients.toArray());
            encountersPatientIDBox.setModel(list);
            this.patientID = encountersPatientIDBox.getSelectedItem().toString();
            
            encountersPatientIDTB.setText(patientID);
            con.close();
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            //error connnecting or querying
            encountersErrorLabel.setText("Error populating patient ID selection box.");
            e.printStackTrace();
        }
    }
    
    public void populateEncounter()
    {
        encountersErrorLabel.setText("");
        encountersPatientIDTB.setText("");
        encounterIDTB.setText("");
        encounterDateTB.setText("");
        encounterNotesTB.setText("");
        diagnosisTB.setText("");
        encounterHealthcareProvTB.setText("");
        ArrayList<String> encounters = new ArrayList<String>();
        
        try
        {
            String query = "SELECT ENCOUNTERID FROM encounters WHERE PATIENTID ='" 
                + encountersPatientIDBox.getSelectedItem() + "' ORDER BY ENCOUNTERID DESC";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);     
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    String encounterIDString = rs.getString("ENCOUNTERID");
                    encounters.add(encounterIDString);
                }
                DefaultComboBoxModel encounterList = new DefaultComboBoxModel(encounters.toArray());
                encounterIDBox.setModel(encounterList);
                con.close();               
                setEncounter();     
            }    
            else
            {
                con.close();
                encountersPatientIDTB.setText(patientID);
                encounterIDTB.setText("");
                encounterDateTB.setText("");
                encounterNotesTB.setText("");
                diagnosisTB.setText("");
                encounterHealthcareProvTB.setText("");
                encounterIDBox.removeAllItems();
                encountersErrorLabel.setText("No encounters exist.");
            }   
        }
        catch(ClassNotFoundException | SQLException e)
        {
            encountersErrorLabel.setText("error populating encounter id box");
            e.printStackTrace();    
        }
    }
    public void setEncounter()
    {
        encountersErrorLabel.setText("");
        String encounterDate = "";
        String encounterType = "";
        String encounterNotes = "";
        String diagnosis = "";
        String healthProvider = "";
        String firstName = "";
        String lastName = "";
        String gender = "";
        encounterDateTB.setText("");
        encounterNotesTB.setText("");
        diagnosisTB.setText("");
        encounterHealthcareProvTB.setText("");
        try 
        {
            String query = "SELECT * FROM encounters WHERE PATIENTID ='" 
                + encountersPatientIDBox.getSelectedItem()
                + "' AND ENCOUNTERID ='" + encounterIDBox.getSelectedItem() + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.isBeforeFirst())
            {
                while(rs.next())
                {
                    //get columns
                    encounterDate = rs.getString(3);
                    encounterType = rs.getString(4);
                    encounterNotes = rs.getString(5);
                    diagnosis = rs.getString(6);
                    healthProvider = rs.getString(7);
                    
                    //set text 
                    encountersPatientIDTB.setText(patientID);
                    encounterIDTB.setText(encounterIDBox.getSelectedItem().toString());
                    encounterDateTB.setText(encounterDate);
                    encounterTypeBox.setSelectedItem(encounterType);
                    encounterNotesTB.setText(encounterNotes);
                    diagnosisTB.setText(diagnosis);
                    encounterHealthcareProvTB.setText(healthProvider);
                }   
            }
            else
            {
                con.close();
                encountersPatientIDTB.setText("");
                encounterIDTB.setText("");
                encounterDateTB.setText("");
                encounterNotesTB.setText("");
                diagnosisTB.setText("");
                encounterHealthcareProvTB.setText("");
                encounterIDBox.removeAllItems();
                encountersErrorLabel.setText("Encounter not found or holds no data.");
            }
        } 
        catch(ClassNotFoundException | SQLException e) 
        {
            encountersErrorLabel.setText("error displaying encounter info");
        }   
        try
        {
            String age = "";
            String query = "SELECT * FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query); 
            if(rs.next())
            {
                lastName = rs.getString("LASTNAME");
                firstName = rs.getString("FIRSTNAME");
                gender = rs.getString("GENDER");
                try
                {
                    int bdayNum = calcAge();
                    age = Integer.toString(bdayNum);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                    encountersNameLabel.setText(firstName + " " + lastName);
                    encountersGenderLabel.setText(gender);
                    encountersAgeLabel.setText(age);     
                }
            else
            {
                con.close();
                encountersErrorLabel.setText("Error finding patient info for "
                    + "header.");   
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            encountersErrorLabel.setText("Error Connecting to Database.");
        }
    }
    public static boolean isNumeric(String str)  
    {  
        try  
        {  
            Long.parseLong(str);  
        }  
        catch(NumberFormatException nfe)  
        {  
            return false;  
        }  
        return true;  
    }
    public boolean addEncounter(String patientID, String encounterDate, 
            String encounterType, String encounterNotes, String diagnosis, 
            String healthCare)
    {
        boolean result = false;
        long patientIDNum = Long.parseLong(patientID);

        try
        {
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("INSERT INTO encounters"
                    + " (PATIENTID, ENCOUNTERDATE, ENCOUNTERTYPE, ENCOUNTERNOTES, "
                    + "DIAGNOSISDESCRIPTION, HEALTHCAREPROVIDER) VALUES "
                    + "(?, ?, ?, ?, ?, ?)");
            stmt.setLong(1, patientIDNum);
            stmt.setString(2, encounterDate);
            stmt.setString(3, encounterType);
            stmt.setString(4, encounterNotes);
            stmt.setString(5, diagnosis);
            stmt.setString(6, healthCare);
            int rowcount = stmt.executeUpdate();
            result = rowcount == 1;
            stmt.close();
            con.close();            
        }
        catch(ClassNotFoundException | SQLException e) 
        { 
            encountersErrorLabel.setText("Encounter could not be created.");
            result = false;
        }
        return result;
    }
    public boolean updateEncounter(String patientID, String encounterID, String encounterDate, 
            String encounterType, String encounterNotes, String diagnosisDescription, 
            String healthCare)
    {
        boolean result = false;
        try
        {
            long patientIDNum = Long.parseLong(patientID);
            
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            PreparedStatement stmt = con.prepareStatement("UPDATE encounters"
                    + " SET PATIENTID = ?, ENCOUNTERDATE = ?, ENCOUNTERTYPE = ?, ENCOUNTERNOTES = ?, "
                    + "DIAGNOSISDESCRIPTION = ?, HEALTHCAREPROVIDER = ? WHERE ENCOUNTERID ='" + encounterID + "'");
            stmt.setLong(1, patientIDNum);
            stmt.setString(2, encounterDate);
            stmt.setString(3, encounterType);
            stmt.setString(4, encounterNotes);
            stmt.setString(5, diagnosisDescription);
            stmt.setString(6, healthCare);
            
            int rowcount = stmt.executeUpdate();
            result = rowcount > 0;
        }
        catch(ClassNotFoundException | SQLException e) 
        {
            encountersErrorLabel.setText("");
            result = false;
        }
        return result;
    }
    public void populateEncounterType()
    {
        encountersErrorLabel.setText("");
        String encounterType = "";
        ArrayList<String> encounterTypeList = new ArrayList<String>();
        
        encounterTypeList.add("Emergency");
        encounterTypeList.add("Inpatient");
        encounterTypeList.add("Outpatient");
        encounterTypeList.add("Obstetrics");
        encounterTypeList.add("Recurring Patient");
        encounterTypeList.add("Short-Stay");
        
        DefaultComboBoxModel list = new DefaultComboBoxModel(encounterTypeList.toArray());
        encounterTypeBox.setModel(list);
    }
    public int calcAge() throws ParseException
    {
        String bday = "";
        int age = 0;
        Calendar now = Calendar.getInstance();
        Calendar dob = Calendar.getInstance();
        try 
        {
            String query = "SELECT BIRTH_DATE FROM patients WHERE PATIENTID ='" + patientID + "'";
            String dbUrl = "jdbc:mysql://localhost:3306/PatientDB";
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection(dbUrl, "root", "root");
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            if(rs.next())
            {
                bday = rs.getString("BIRTH_DATE");
                SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy", Locale.US);
                dob.setTime(sdf.parse(bday));
                int year1 = now.get(Calendar.YEAR);
                int year2 = dob.get(Calendar.YEAR);
                age = year1 - year2;
                int month1 = now.get(Calendar.MONTH);
                int month2 = dob.get(Calendar.MONTH);
                if (month2 > month1) 
                {
                    age--;
                } 
                else if (month1 == month2) 
                {
                    int day1 = now.get(Calendar.DAY_OF_MONTH);
                    int day2 = dob.get(Calendar.DAY_OF_MONTH);
                    if (day2 > day1) 
                    {
                        age--;
                    }
                }
                return age;
            }
        }
        catch(ClassNotFoundException | SQLException e)
        {
            encountersErrorLabel.setText("Age not found.");
        }
        return age; 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea diagnosisTB;
    private javax.swing.JTextField encounterDateTB;
    private javax.swing.JScrollPane encounterDescrTextArea;
    private javax.swing.JScrollPane encounterDiagDescrTextArea;
    private javax.swing.JTextField encounterHealthcareProvTB;
    private javax.swing.JComboBox encounterIDBox;
    private javax.swing.JTextField encounterIDTB;
    private javax.swing.JTextArea encounterNotesTB;
    private javax.swing.JComboBox encounterTypeBox;
    private javax.swing.JButton encountersAddRecordButton;
    private javax.swing.JLabel encountersAgeLabel;
    private javax.swing.JButton encountersCancelButton;
    private javax.swing.JButton encountersDeleteButton;
    private javax.swing.JLabel encountersErrorLabel;
    private javax.swing.JLabel encountersGenderLabel;
    private javax.swing.JButton encountersLabsPageButton;
    private javax.swing.JButton encountersMedPageButton;
    private javax.swing.JButton encountersModifyButton;
    private javax.swing.JLabel encountersNameLabel;
    private javax.swing.JButton encountersPatientDemPageButton;
    private javax.swing.JComboBox encountersPatientIDBox;
    private javax.swing.JTextField encountersPatientIDTB;
    private javax.swing.JButton encountersReportsPageButton;
    private javax.swing.JButton encountersSaveButton;
    private javax.swing.JButton encountersVitalSignsPageButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
